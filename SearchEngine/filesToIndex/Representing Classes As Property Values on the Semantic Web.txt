Representing Classes As Property Values on the Semantic Webhref="http://www.w3.org/StyleSheets/TR/W3C-WG-NOTE.css">src="http://www.w3.org/Icons/w3c_home" alt="W3C" height="48"width="72">Representing Classes As Property Values on the Semantic WebW3C Working Group Note 5 April 2005This version:http://www.w3.org/TR/2005/NOTE-swbp-classes-as-values-20050405Latest version:http://www.w3.org/TR/swbp-classes-as-valuesPrevious version:http://www.w3.org/TR/2004/WD-swbp-classes-as-values-20040721Editor:Natasha Noy, StanfordUniversityContributors:Michael Uschold, BoeingChris Welty,IBM Research Also see Acknowledgements.href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright ©2005title="World Wide Web Consortium">W3C®(Institute of Technology">MIT,href="http://www.ercim.org/">Consortium for Informatics and Mathematics">ERCIM,href="http://www.keio.ac.jp/">Keio), All Rights Reserved. W3Chref="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability,href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademarkandhref="http://www.w3.org/Consortium/Legal/copyright-documents">documentuse rules apply.AbstractThis document addresses the issue of using classes as property values in OWL andRDF Schema. It is often convenient to put a class (e.g., Animal)as a property value (e.g., topic or book subject) when building an ontology. WhileOWL Full and RDF Schema do not put any restriction on using classes as propertyvalues, in OWL DL and OWL Lite most properties cannot have classes as their values. Weillustrate the direct approach for representing classes as property values inOWL-Full and RDF Schema. We present various alternative mechanisms for representingthe required information in OWL DL and OWL Lite. For each approach, we discussvarious considerations that the users should keep in mind when choosing the bestapproach for their purposes.Status of this DocumentThis section describes the status of this document at the time of its publication.Other documents may supersede this document. A list of current W3C publicationsand the latest revision of this technical report can be found in the W3Ctechnical reports index at http://www.w3.org/TR/.This document is a WorkingGroup Note, produced by the OntologyEngineering and Patterns Task Force in the SemanticWeb Best Practices and Deployment Working Group, part of theW3C Semantic Web Activity.This document is one of a series of documents that is produced by thetask force. Comments on this document may be sent topublic-swbp-wg@w3.org,a mailing list with a>public archive.Publication as a Working Group Note does not imply endorsement by the W3CMembership. This is a draft document and may be updated, replaced orobsoleted by other documents at any time. It is inappropriate to citethis document as other than work in progress.General issueIt is often convenient to put a class (e.g., Animal) as a propertyvalue (e.g., topic or book subject) when building an ontology. While OWL Full[OWL Overview] and RDF Schema [RDFS]do not put any restriction on using classes as property values, in OWL DLand OWL Lite most properties cannot have classes as their values.Use case exampleSuppose we have a set of books about animals, and a catalog of these books. We want to annotate each catalog entry with its subject, which is a particularspecies or class of animal that the book is about. Further, we want to be ableto infer that a book about African lions is also a book about lions. For example,when retrieving all books about lions from a repository, we want books that areannotated as books about African lions to be included in the results.More specifically, consider two book examples: (1) "Lions:Life in the Pride", which is a book that "presents an introduction to lionsdescribing their physical characteristics, habitat, young, food, predators,and relationship to people"; and (2) "TheAfrican Lion," which "describes the physical characteristics, habitat, andbehavior of the" African lions. We would like to specify that the first bookdescribes the animal species of lion, and the second describes a species ofAfrican lion. We also want to retrieve the second book when a query is aboutlions, not just African lions.We consider species of animals to be subjects of the booksandwould like to use the Dublin Core propertyhref="http://purl.org/dc/elements/1.1/subject">dc:subjectfor this annotation.  Furthermore, we would like to use as oursubjectsvarious species from an existing class hierarchy of different animalspecies.We examine representation of this information in OWL and RDF Schema and suggestdifferent ways of capturing this information in OWL DL and OWL Lite.One goal of the web publisher is to enable maximum reuse of published information.It will be common on the Semantic Web to import and reuse other published ontologies.Any reuse of existing ontologies on the Semantic Web (in our case, a hierarchyof animal species) should preserve the original intended semantics in the newcontext. If the semantics changes, other applications already using the ontologymay be adversely affected. Interoperation with existing applications using thisontology will also be error-prone (since there will be two different interpretationsof the same ontology). Some of the patterns that we suggest below change theinterpretation of the hierarchy of classes used for property values. We suggestthat users take this approach only if they know that no one will be adverselyaffected by such re-interpretation.Other use case scenariosThis issue arises in general when we have a hierarchy of classes and wouldlike to use it as a terminology to annotate other classes or individuals.Consider using a hierarchy of different genres to annotate music CDs, or linkingclasses or individuals in an ontology to the corresponding terms in a standardreference terminology.  For example,href="http://www.nlm.nih.gov/research/umls/">UMLS is a standard referenceterminology for many medical applications. One may want to have a hasDiagnosisrelation from an instance of a patient to a class representing a disease indicatingthe patient was diagnosed with that disease.  Other use cases for usingclasses as property values include meta-modeling and semantic interoperabilitybetween systems. This note uses a particular example (classes as the subjects of books) to illustratea more general representation issue: using classes as property values. style="font-weight: bold;">This note should not be interpreted as a general discussionof how to represent subject hierarchies or terminologies on the semantic web.NotationsIn all the figures below, ovals represent classes and rectangles represent individuals.The orange color signifies classes or individuals that are specific to a particularapproach. Green arrows with green labels arehref="http://www.w3.org/TR/owl-ref/#Annotations">OWL annotation properties.We use N3 syntax to represent the examples.ApproachesApproach 1: Use classes directly as property valuesIn the first approach, we can simply use classes from the subjecthierarchyas values for properties (in our example, as values for the dc:subjectproperty). We can define a class Book to represent all books.For simplicity, in the hierarchy of animals, we omit classes for otheranimals, such as mammals and felines (Figure 1).Figure 1. Using classes directly aspropertyvalues.Here is a definition of an individual (a specific book that we areannotating)with the corresponding subject (for simplicity, we assume that eachbookdiscusses only one species of animal)::LionsLifeInThePrideBook      a       :Book ;      rdfs:seeAlso <http://isbn.nu/0736809643> ;      :bookTitle "Lions: Life in the Pride" ;      dc:subject :Lion .The book "The African Lion" will be represented as::TheAfricanLionBook      a       :Book ;      rdfs:seeAlso <http://isbn.nu/089686328X> ;      :bookTitle "The African Lion" ;      dc:subject :AfricanLion  .And the class AfricanLion is a subclass of the class Lion::AfricanLion      a       owl:Class;      rdfs:subClassOf :Lion .Considerations when choosing approach 1:The resulting ontology is compatible with RDF Schema and OWLFull, butit is outside OWLDL and OWL Lite.This approach is probably the most succinct and intuitive amongall theapproaches proposed here.Applications using this representation can directly access theinformationneeded to infer that Lion (the subject of the LionsLifeInThePrideBookindividual) is a subclass of Animal and that AfricanLion(the subject of the TheAfricanLionBook individual) is asubclassof Lion.If we need to restrict the range of values for the dc:subjectproperty, then we need to create an additional class for such a restriction.For instance, we may want to define a class of all books about animals—BookAboutAnimals—thatour animal books will be instances of and we want to restrict the range ofvalues for the dc:subject property for the BookAboutAnimalsclass to the class Animal and its subclasses. One way to definesuch restriction is as follows::BookAboutAnimals      a       owl:Class ;      rdfs:subClassOf :Book ;      rdfs:subClassOf              [ a       owl:Class ;                owl:unionOf ([ a       owl:Restriction ;                               owl:onProperty dc:subject ;                               owl:hasValue Animal                             ]                              [ a       owl:Restriction ;                               owl:onProperty dc:subject ;                               owl:someValuesFrom                                    [ a       owl:Restriction ;                                      owl:onProperty rdfs:subClassOf;                                      owl:hasValue Animal                                     ]                          ])              ] .Here we say that the class BookAboutAnimals is a subclass oftheclass Book. The class BookAboutAnimals is also asubclassof the class of all things that must have either the class Animalitself, or any class that is a subclass of Animal as one ofthevalues of the dc:subject property.OWL code for approach 1[N3] [RDF/XML]Summary of approach 1This approach is a good one to use if you care about simplicity, do not have tobe in OWL DL, and either do not need to limit the range of the dc:subjectvalues or do not care that you also need to use classes as subjects to implementthis restriction.Approach 2: Create special instances of the class to be usedas property valuesWe can treat the hierarchy of animal species as a hierarchy of subjects, createindividuals corresponding to all the subjects and use these individuals as valuesfor the dc:subjectproperty (Figure 2).alt="Creating a hierarchy of subjects and a parallel set of subject individuals">Figure 2. Using a hierarchy of subjectsand a parallel set of subject individuals.Thus, we will have, for example, an individual LionSubject thatwill be an instance of the Lion class:  :LionSubject      a       :Lion .We can then use the LionSubject as the value of the property dc:subjectfor the LionsLifeInThePrideBook individual::LionsLifeInThePrideBook      a       :Book ;      rdfs:seeAlso <http://isbn.nu/0736809643> ;      :bookTitle "Lions: Life in the Pride" ;      dc:subject :LionSubject .Considerations when choosing approach 2:The resulting ontology is compatible with RDF Schema and OWLLite (and hence OWL DL)The class Lion has an instance that is the subject lion.Creating an instance of the Lion class to represent a specificlion at the zoo would be inconsistent with this interpretation. Therefore,we will need to have a different class to represent  lions at the zoo.This change has important implications if the hierarchy of animals is notcreated by us, but we imported it from somewhere else. Applications will interpretthe reference to imported classes according to their original definitions.Other ontologies importing the same hierarchy of animals will in fact usethe original definition. Therefore, there may be inconsistency not only inour own interpretation but also when our ontology is integrated with othersimporting the same resource. This consideration is not a problem when interoperabilityis not an issue.In this approach, there is no explicit direct relation (i.e.,a relation that a general-purpose reasoner canreadily identify) between the LionSubject individual definedaboveand, for example, an AfricanLionSubject individual, which isaninstance of AfricanLion::AfricanLionSubject      a       :AfricanLion .An application trying to utilize this relation(for example, to extract books about African lions when askedforbooks about lions), will need to be aware of this specific approach andknow to trace back to the corresponding classes, their subclasses, andrespective instances. A general-purpose reasoner willnot be able to use this information directly. Note however that theindividual AfricanLionSubjectis also an instance of the Lion class. Therefore, if we askforall books where dc:subject is an instance of the Lionclass we will get the books that are annotated with AfricanLionSubject.There is a maintenance penalty: We need to maintain a set ofinstancesfor all subjects in addition to the hierarchy of subjects and ensurethatthe two sets—classes representing subjects and correspondingindividuals—areconsistent with each other (e.g., that they have the same names, etc.).However, developers can instrument tools that would maintain thisconsistencyautomatically.Some may consider this approach to be "too messy" for the simpletaskathandDefining a range restriction for thehref="http://purl.org/dc/elements/1.1/subject">dc:subjectproperty for the class BookAboutAnimals is straightforward.Wedefine a someValuesFrom restriction that states that somevaluesof the dc:subject property are instances of the class Animal:    :BookAboutAnimals      a       owl:Class ;      rdfs:subClassOf              [ a       owl:Restriction ;                owl:someValuesFrom :Animal ;                owl:onProperty dc:subject              ] .OWL code for approach 2[N3] [RDF/XML]Summary of approach 2This approach results in an OWL DL ontology and may be a good one to use if stayingin OWL DL is important. The approach has a potential disadvantage of having actualsubject values be unrelated to one another and hence not allowing a general-purposereasoner to relate books with a subject "lion" to books with a subject "Africanlions", for example. Furthermore, if the hierarchy of animals is imported andthe source uses the hierarchy to describe actual animals, using this approachis inconsistent with this interpretation. You need to maintain consistency betweenthe set of classes representing subjects and the set of corresponding individuals.Approach 3: Create a parallel hierarchy of instances as propertyvaluesWe can create a single class Subject and make all the subjects tobe individuals that are instances of this class Subject (href="#figure3">Figure 3): :LionSubject      a       :Subject ;      rdfs:seeAlso :Lion .alt="using a property other than rdfs:subclassOf to organize the subject hierarchy">Figure 3. Using a property other than rdfs:subClassOfto organize the subject hierarchyWe can use the annotation property rdfs:seeAlso to link the LionSubjectindividual to the Lion class. Note that rdfs:seeAlsois an annotation property and hence giving it a value that is a class does nottake us out of OWL DL. In this approach, we are essentially using individualsas surrogates for classes.We can then create explicit relations between different subjects, which willre-create the hierarchy for animals that we have in mind. :parentSubject      a       owl:TransitiveProperty , owl:ObjectProperty ;      rdfs:domain :Subject ;      rdfs:range :Subject ;      rdfs:seeAlso <http://www.w3.org/2004/02/skos/core#broader> .:AfricanLionSubject      a       :Subject ;      rdfs:seeAlso :AfricanLion ;      :parentSubject :LionSubject .While wecreate our own property parentSubject, we can also use thecorrespondingproperties from the SKOS-Core1.0 schema, which is an RDF schema for representing thesauri andsimilartypes of knowledge organization systems. So, for example parentSubjectis similar to skos:broader. The SKOS schema provides a richvocabularyfor handling subject hierarchy, with additional properties such as skos:narrower,skos:related,and so on.Considerations when choosing Approach 3The resulting ontology is compatible with RDF Schema and OWLLite (andhence OWL DL). However, note that RDF Schema does not havetransitiveproperties, thus we will not be able to express the transitivity of theparentSubjectproperty in RDF Schema.Most DL reasoners will be able to infer transitive relations betweensubjects, such as the fact that AnimalSubject is a parentSubjectof AfricanLionSubject. However, a DL reasoner willnot be able to infer that a book that has LionSubject as thevaluefor dc:subject is also about Animals. More specializedreasonersmay be able to infer this information.The resulting hierarchy of subjects is not related to or dependent on theclass hierarchy representing the same topics (in this case, animals), exceptthrough an annotation property rdfs:seeAlso. Annotation propertieshowever, are usually ignored by inference engines.Some may consider the approach of having two parallel hierarchies representingessentially the same information to be too complicated and difficult to maintainfor the simple task at handThis approach explicitly separates the subject terminology fromthecorrespondingontology. Many consider this separation a good modeling practice: thesemanticsof a subject Lion can be different from the semantics of theclassof lions. Having subjects in a separate hierarchy, would allow us todefinefor example that the subject Africa is a parent subject ofthesubject AfricanLion.The separation of the subject terminology from the correspondingontologyincurs a serious maintenance penalty: We need to maintain a set ofinstancesfor all subjects in addition to the hierarchy of subjects. In manyapplications,we may also need to ensure that the two sets—classes representingsubjectsand corresponding individuals and values for the parentSubjectproperty—are consistent with each other. However, developers caninstrumenttools that would maintain this consistency automatically.Defining a range restriction for thehref="http://purl.org/dc/elements/1.1/subject">dc:subjectproperty for the class BookAboutAnimals is straightforward.Werestrict the values of the dc:subject property to theinstancesof the class Subject:    :BookAboutAnimals      a       owl:Class ;      rdfs:subClassOf              [ a       owl:Restriction ;                owl:someValuesFrom :Subject ;                owl:onProperty dc:subject              ] .OWL code for approach 3[N3] [RDF/XML]Summary of approach 3This approach may be a good one to use if staying within OWL DL is important.It also allows you to use a DL reasoner to infer transitive relationships betweensubjects. It does carry the penalty of having two parallel "hierarchies."Approach 4: Create a special restriction in lieu of usinga specific valueThis approach enables us to use a DL reasoner to infer, for example, that abook that has Lion as a subject also has Animal asits subject. In this approach, we create a new class to represent a class ofall books with a particular subject. For example, we create a class BookAboutLionsto represent all books that have Lion as one of their subjects.We then assign a subject to a specific book by making the book an instance ofone of these classes, instead of explicitly setting a property value for theinstance. Thus, for example the individual LionsLifeInThePrideBookwill be an instance of the class BookAboutLions (href="#figure4">Figure 4). We create similar classes for any subject categoryof books that we are interested in, such as BookAboutAnimals, BookAboutAfricanLions.alt="using members of a class as values for the property">Figure 4. Using members of a class as values forproperties.The key in this pattern is the definition of the new book classes. Becausethese classes represent all the books about a particular subject, we includesubject in the definition. The following, for example, is the definition ofthe class BookAboutLions::BookAboutLions      a       owl:Class ;      owl:equivalentClass              [ a       owl:Class ;                owl:intersectionOf ([ a       owl:Restriction ;                                              owl:onProperty dc:subject ;                                              owl:someValuesFrom :Lion                                    ]                                     :Book)              ] .A specific instance of this class LionsLifeInThePrideBookwouldthen be defined as follows::LionsLifeInThePrideBook      a       :BookAboutLions ;      rdfs:seeAlso <http://isbn.nu/0736809643> ;      :bookTitle "Lions: Life in the Pride" .The code above says, literally, that this book instance (LionsLifeInThePrideBook)is an instance of a class, all of whose members have at least one instance ofthe class Lion as the value for the dc:subject property.In OWL, it is not necessary to create any explicit instances of these classesthat we use in the someValuesFrom restriction (e.g., Lionabove). Inhref="#figure4">Figure 4, we include these instances in the diagram as ifthey were explicit, and use dotted lines to denote that they may not actuallyexist.This approach approximates the interpretation that we used in the previousapproaches by using unspecified members of a class rather than the class itselfas property values (href="#figure4">Figure 4). We define the class BookAboutAnimalsas a class of books where the subject is some (unidentified) animal oranimals. Similarly, a BookAboutLions class will be a class of bookswhere a subject is some (unidentified) lion or lions.A DL reasoner will be able to classify LionsLifeInThePrideBookas an instance of the class BookAboutAnimals.Note that there a correspondence between the hierarchy of classes of bookson specific subjects (such as BookAboutAnimals, BookAboutLions,and BookAboutAfricanLions) and the classes in the species hierarchythat we use as subjects (Animal, Lion, AfricanLion).The hierarchy of books essentially parallels the hierarchy of subjects, althoughit does not have to have a book class corresponding to each subjects—onlythe subjects that we are interested in. If the book classes are defined as above,a DL reasoner will be able to infer automatically the hierarchy of book classes,based on the hierarchy of subjects.There is a variant to this approach in which we merge the two steps into one.Instead of creating an explicit named class, BookAboutLions, andthen creating an instance of this class, we create the instance and assign itstype to be an anonymous class of type owl:Restriction. In thisvariant, there is no explicitly named class corresponding to BookAboutLions.For example, we can define LionsLifeInThePrideBook as follows::LionsLifeInThePrideBook      a       :Book;      [ a       owl:Restriction ;                owl:onProperty dc:subject ;                owl:someValuesFrom :Lion      ];      rdfs:seeAlso <http://isbn.nu/0736809643> ;      :bookTitle "Lions: Life in the Pride" .Considerations when choosing Approach 4The resulting ontology is compatible with OWL DL. Sincethisapproachuses restrictions, which do not have any semantics in RDF Schema, wecannotuse this approach for RDF Schema.The interpretation of this pattern is different from interpretationsof the other patterns in this note: the subject of the book is one or morespecific lions—individuals in the Lion class—rather thanthe Lion class itself . In this case, a book about lions is a bookabout some lions, even if that happens to be all lions.A Description Logic reasoner will be able to classify automatically theindividual LionsLifeInThePrideBook that has an instance of a Lionclass as its subject as an instance of both the class BookAboutLionsand BookAboutAnimals. It will also be able to classify the classBookAboutLions defined above as a subclass of the class BookAboutAnimals(defined in a similar way).This approach is likely to be the easiest approach to use if youwouldlike to employ DL reasoning to classify books based on their subjects.Many would consider it more cumbersome to express a simple factthatthesubject of a book is "lions" by creating a new (usually, anonymous)restrictionclass and making that class to be the type of the book.OWL code for approach 4[N3] [RDF/XML]Summary of approach 4This approach can make the most use of DL reasoners. It represents a differentinterpretation of the subject as being a prototypical instance of a class ratherthan a whole class of things or a specific subject corresponding to that class.With the understanding that you are using a different interpretation, this approachmay be a good one to use if using DL reasoners to classify individuals based ontheir subjects (or another property used in its place) is important.Approach 5: Use classes directly as annotation property valuesAnother way to stay in OWL DL is to use classes as values forhref="http://www.w3.org/TR/owl-ref/#Annotations">annotation properties (Figure5). This approach is very similar to approach 1, but it treats dc:subjectas an annotation property: dc:subject      a       owl:AnnotationProperty .:LionsLifeInThePrideBook      a       :Book ;      rdfs:seeAlso <http://isbn.nu/0736809643> ;      :bookTitle "Lions: Life In The Pride" ;      dc:subject :Lion  .alt="Using classes as values for annotation properties" height="302"width="468">Figure 5. Using classes as values for annotationproperties.Considerations when choosing Approach 5In OWL DL, annotation properties cannot at the same time bedefinedeitherobject properties or datatype properties. Thus, if dc:subject(or another property you want to use) is defined elsewhere as an objectproperty or a datatype property, it cannot be used as an annotationproperty.In OWL DL, annotation properties cannot have any restrictions,such ascardinality or domain/range restrictions, or subproperties. Thus, ifyouuse this approach, you cannot specify that each book should have atleastone subject for example or that individuals that are instances of BookAboutAnimalsmust all be subclasses of the Animal class.Even if the ontology is in OWL DL (i.e., the annotationproperties areused consistent with OWL DL restrictions), DL reasoners will not usetheinformation in annotation properties for reasoning. Thus, in order toextracta book about lions when queried for animal books, one would need to usespecial-purpose reasoning that uses annotation properties and canperformreasoning with them.OWL code for approach 5[N3] [RDF/XML]Summary of approach 5This approach allows you to use classes directly as propertyvalues while staying in OWL DL. However, the properties thatwillhave classes as values will have to be defined as annotations andthereforecannot have any additional restrictions defined on them (and should notbe declared as object or datatype properties elsewhere). DL reasonerswillnot use values of annotation properties.References[N3]Primer:Getting intoRDF and Semantic Web using N3,http://www.w3.org/2000/10/swap/Primer.[OWLOverview]OWLWebOntology Language Overview, Deborah L. McGuinness and Frank vanHarmelen, Editors, W3C Recommendation, 10 February 2004,http://www.w3.org/TR/2004/REC-owl-features-20040210/. Latest versionavailableat http://www.w3.org/TR/owl-features/ .[OWL Guide]OWLWebOntology Language Guide, Michael K. Smith, Chris Welty, andDeborahL. McGuinness, Editors, W3C Recommendation, 10 February 2004,http://www.w3.org/TR/2004/REC-owl-guide-20040210/. Latest versionavailableat http://www.w3.org/TR/owl-guide/ .[OWLSemantics and Abstract Syntax]OWLWeb Ontology Language Semantics and Abstract Syntax, Peter F.Patel-Schneider,Patrick Hayes, and Ian Horrocks, Editors, W3C Recommendation, 10February2004, http://www.w3.org/TR/2004/REC-owl-semantics-20040210/ .href="http://www.w3.org/TR/owl-semantics/">Latestversion available at http://www.w3.org/TR/owl-semantics/ .[RDF]Resource Description Framework (RDF) Model and Syntax Specification,Ora Lassila, Ralph R. Swick, Editors.World Wide Web Consortium Recommendation, 1999,http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/.Latest versionavailable at http://www.w3.org/TR/REC-rdf-syntax/.[RDFS]RDF Vocabulary Description Language 1.0: RDF Schema,Dan Brickley and R.V. Guha, Editors.W3C Recommendation, 10 February 2004,http://www.w3.org/TR/2004/REC-rdf-schema-20040210/ .Latest versionavailable at http://www.w3.org/TR/rdf-schema/.[RDFSemantics]RDFSemantics,Pat Hayes, Editor, W3C Recommendation, 10 February 2004,http://www.w3.org/TR/2004/REC-rdf-mt-20040210/. Latest version availableathttp://www.w3.org/TR/rdf-mt/ .[RDFVocabulary]RDFVocabularyDescription Language 1.0: RDF Schema, Dan Brickley and R. V.Guha,Editors, W3C Recommendation, 10 February 2004,http://www.w3.org/TR/2004/REC-rdf-schema-20040210/. Latest versionavailableat http://www.w3.org/TR/rdf-schema/ .AcknowledgementsThe editor would like to thank the following Working Group members for their contributionsto this document: Aldo Gangemi, Pat Hayes, Aditya Kalyanpur, Brian McBride, AlanRector, Bernard Vatant. Atanas Kiryakov, Peter Mika, and York Sure have also contributedto the document.This document is a product of the Ontology Engineering and Patterns Task Forceof the Semantic Web Best Practices and Deployment Working Group.src="http://www.w3.org/Icons/valid-html401"alt="Valid HTML 4.01!" height="31" width="88">src="http://jigsaw.w3.org/css-validator/images/vcss"alt="Valid CSS!">