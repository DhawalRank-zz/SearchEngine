Cross-Origin Resource Sharing.example { margin-left:1em; padding-left:1em; border-left:double; color:#222; background:#fcfcfc }.example code strong { color:inherit; background:#ff0 }.note { margin-left:2em; font-weight:bold; font-style:italic; color:green }.note pre { font-weight:normal; font-style:normal }.warning { margin-left:2em; font-weight:bold; font-style:italic; color:red }p.warning::before { content:"Warning: " }pre > code, li > code { color:inherit; background:transparent }p.note::before { content:"Note: " }.XXX { padding:.5em; border:solid #f00 }p.XXX::before { content:"Issue: " }dl.switch { padding-left:2em }dl.switch > dt { text-indent:-1.5em }dl.switch > dt:before { content:'\21AA'; padding:0 0.5em 0 0; display:inline-block; width:1em; text-align:right; line-height:0.5em }em.ct { text-transform:lowercase; font-variant:small-caps; font-style:normal }dfn { font-weight:bold; font-style:normal }code { color:orangered; }code :link, code :visited { color:inherit }hr:not(.top) { display:block; background:none; border:none; padding:0; margin:2em 0; height:auto }Cross-Origin Resource SharingW3C Recommendation 16 January 2014This Version:http://www.w3.org/TR/2014/REC-cors-20140116/Latest Version:http://www.w3.org/TR/cors/Previous Versions:http://www.w3.org/TR/2013/PR-cors-20131205/http://www.w3.org/TR/2013/CR-cors-20130129/http://www.w3.org/TR/2012/WD-cors-20120403/http://www.w3.org/TR/2010/WD-cors-20100727/http://www.w3.org/TR/2009/WD-cors-20090317/http://www.w3.org/TR/2008/WD-access-control-20080912/http://www.w3.org/TR/2008/WD-access-control-20080214/http://www.w3.org/TR/2007/WD-access-control-20071126/http://www.w3.org/TR/2007/WD-access-control-20071001/http://www.w3.org/TR/2007/WD-access-control-20070618/http://www.w3.org/TR/2007/WD-access-control-20070215/http://www.w3.org/TR/2006/WD-access-control-20060517/http://www.w3.org/TR/2005/NOTE-access-control-20050613/Editor:Anne van Kesteren(formerly of Opera Software ASA)<annevk@annevk.nl>Please note there may be errata for this document.The English version of this specification is the only normative version. Non-normativetranslations may also be available.Copyright Â© 2014 W3CÂ® (MIT, ERCIM, Keio, Beihang), All Rights Reserved. W3C liability, trademark and document use rules apply.AbstractThis document defines a mechanism to enable client-side cross-originrequests. Specifications that enable an API to make cross-origin requeststo resources can use the algorithms defined by this specification. Ifsuch an API is used on http://example.org resources, aresource on http://hello-world.example can opt in using themechanism described by this specification (e.g., specifyingAccess-Control-Allow-Origin: http://example.org as responseheader), which would allow that resource to be fetched cross-origin fromhttp://example.org.Status of this DocumentThis section describes the status of this document at the time ofits publication. Other documents may supersede this document. A list ofcurrent W3C publications and the latest revision of this technical reportcan be found in theW3C technical reports index athttp://www.w3.org/TR/.This document has been reviewed by W3C Members, by software developers,and by other W3C groups and interested parties, and is endorsed by theDirector as a W3C Recommendation. It is a stable document and may beused as reference material or cited from another document. W3C's role inmaking the Recommendation is to draw attention to the specification andto promote its widespread deployment. This enhances the functionalityand interoperability of the Web.This W3C Recommendation of CORS was produced jointly by theWeb Applications (WebApps)andWeb ApplicationSecurity (WebAppSec) Working Groups, and published by theWebAppSec Working Group. No changes were made since the previouspublication as Proposed Recommendation.If you wish to make comments regarding this document, please send them topublic-webappsec@w3.org(subscribe,archives).This document was produced by groups operating under the 5 February 2004 W3C Patent Policy. W3C maintains a public list of any patent disclosures for the WebAppSec WG and the WebApps WG made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains Essential Claim(s) must disclose the information in accordance with section 6 of the W3C Patent Policy.By publishing this Recommendation W3C expects that the functionalityspecified in this Cross-Origin Resource Sharing Recommendation willnot be affected by changes to HTML5 or to HTTP Status Code 308as those specifications proceed to Recommendation and RFC statusrespectively.An initial implementation report is available, with a supplement for changes since Candidate Recommendation.Table of Contents1 Introduction2 Conformance3 Terminology4 Security Considerations5 Syntax5.1 Access-Control-Allow-Origin Response Header5.2 Access-Control-Allow-Credentials Response Header5.3 Access-Control-Expose-Headers Response Header5.4 Access-Control-Max-Age Response Header5.5 Access-Control-Allow-Methods Response Header5.6 Access-Control-Allow-Headers Response Header5.7 Origin Request Header5.8 Access-Control-Request-Method Request Header5.9 Access-Control-Request-Headers Request Header6 Resource Processing Model6.1 Simple Cross-Origin Request, Actual Request, andRedirects6.2 Preflight Request6.3 Security6.4 Implementation Considerations7 User Agent Processing Model7.1 Cross-Origin Request7.1.1 Handling a Response to a Cross-Origin Request7.1.2 Cross-Origin Request Status7.1.3 Source Origin7.1.4 Simple Cross-Origin Request7.1.5 Cross-Origin Request with Preflight7.1.6 Preflight Result Cache7.1.7 Generic Cross-Origin Request Algorithms7.2 Resource Sharing Check7.3 Security8 CORS API Specification Advice8.1 Constructing a Cross-Origin Request8.2 Dealing with Same Origin to Cross-Origin Redirects8.3 Dealing with theCross-Origin Request Status8.4 SecurityReferencesAcknowledgments1 IntroductionThis section is non-normative.User agents commonly apply same-origin restrictions to networkrequests. These restrictions prevent a client-side Web applicationrunning from one origin from obtaining data retrieved from another origin,and also limit unsafe HTTP requests that can be automatically launchedtoward destinations that differ from the running application's origin.In user agents that follow this pattern, network requests typicallyinclude user credentials with cross-origin requests, including HTTPauthentication and cookie information.This specification extends this model in several ways:A response can include anAccess-Control-Allow-Originheader, with the origin of where the request originated from as thevalue, to allow access to the resource's contents.The user agent validates that the value and origin of where therequest originated match.User agents can discover via a preflight request whethera cross-origin resource is prepared to accept requests, using anon-simple method, from a given origin.This is again validated by the user agent.Server-side applications are enabled to discover that an HTTP requestwas deemed a cross-origin request by the user agent, through theOrigin header.This extension enables server-side applications to enforcelimitations (e.g. returning nothing) on the cross-origin requests thatthey are willing to service.This specification is a building block for other specifications,so-called CORS API specifications, which define how this specification isused. Examples are Server-Sent Events and XMLHttpRequest.[EVENTSOURCE][XHR]The CORS wiki page providesmore background information about this document.If a resource author has a simple text resource residing athttp://example.com/hello which contains the string"Hello World!" and would like http://hello-world.example tobe able to access it, the response combined with a headerintroduced by this specification could look as follows:Access-Control-Allow-Origin: http://hello-world.exampleHello World!Using XMLHttpRequest a client-sideWeb application on http://hello-world.example can accessthis resource as follows:var client = new XMLHttpRequest()client.open("GET", "http://example.com/hello")client.onreadystatechange = function() { /* do something */ }client.send()It gets slightly more complicated if the resource author wants to beable to handle cross-origin requests using methods other thansimple methods. In that casethe author needs to reply to a preflight request that uses theOPTIONS method and then needs to handle the actual requestthat uses the desired method (DELETE in this example) andgive an appropriate response. The response to the preflight request couldhave the following headers specified:Access-Control-Allow-Origin: http://hello-world.exampleAccess-Control-Max-Age: 3628800Access-Control-Allow-Methods: PUT, DELETETheAccess-Control-Max-Ageheader indicates how long the response can be cached, so that forsubsequent requests, within the specified time, no preflight request hasto be made. TheAccess-Control-Allow-Methodsheader indicates the methods that can be used in the actual request. Theresponse to the actual request can simply contain this header:Access-Control-Allow-Origin: http://hello-world.exampleThe complexity of invoking the additional preflight request isthe task of the user agent. UsingXMLHttpRequest again and assuming theapplication were hosted at http://calendar.example/app theauthor could use the following ECMAScript snippet:function deleteItem(itemId, updateUI) {var client = new XMLHttpRequest()client.open("DELETE", "http://calendar.example/app")client.onload = updateUIclient.onerror = updateUIclient.onabort = updateUIclient.send("id=" + itemId)}2 ConformanceThis specification is written for resource authors and user agents. Itincludes advice for specifications that define APIs that use thecross-origin request algorithm defined in this specification— CORS API specifications — and the generalsecurity considerations section includes someadvice for client-side Web application authors.As well as sections and appendices marked as non-normative, alldiagrams, examples, and notes in this specification are non-normative.Everything else in this specification is normative.In this specification, The words must andmay are to be interpreted as described in RFC 2119.[RFC2119]Requirements phrased in the imperative as part of algorithms (e.g."terminate the algorithm") are to be interpreted with the meaning of thekey word (e.g. must) used in introducing thealgorithm.A conformant resource is one that implements all the requirementslisted in this specification that are applicable to resources.A conformant user agent is one that implements all the requirementslisted in this specification that are applicable to user agents.User agents and resource authors may employ anyalgorithm to implement this specification, so long as the end result isindistinguishable from the result that would be obtained by thespecification's algorithms.3 TerminologySome terminology in this specification is fromThe Web Origin Concept,HTML,HTTPandURI.[ORIGIN][HTML][HTTP][URI]Terminology is generally defined throughout the specification. However,the few definitions that did not really fit anywhere else are defined hereinstead.Comparing two strings in acase-sensitive manner means comparing themexactly, codepoint for codepoint.Comparing two strings in anASCII case-insensitive manner meanscomparing them exactly, codepoint for codepoint, except that thecharacters in the range U+0041 LATIN CAPITAL LETTER A to U+005ALATIN CAPITAL LETTER Z and the corresponding characters in the rangeU+0061 LATIN SMALL LETTER A to U+007A LATIN SMALL LETTER Z areconsidered to also match.Converting a string to ASCII lowercasemeans replacing all characters in the range U+0041 LATIN CAPITAL LETTER Ato U+005A LATIN CAPITAL LETTER Z with the corresponding characters in therange U+0061 LATIN SMALL LETTER A to U+007A LATIN SMALL LETTER Z).The term user credentials for the purposes of thisspecification means cookies, HTTP authentication, and client-side SSLcertificatesthat would be sent based on the user agent's previous interactions with the origin.Specifically it does not refer to proxy authentication orthe Origin header.[COOKIES]The term cross-origin is used to mean nonsame origin.A method is said to be asimple method if it is acase-sensitive match for one of the following:GETHEADPOSTA header is said to be asimple header if the header field name is anASCII case-insensitive match for Accept,Accept-Language, or Content-Language or if itis an ASCII case-insensitive match forContent-Type and the header field value media type (excludingparameters) is an ASCII case-insensitive match forapplication/x-www-form-urlencoded,multipart/form-data, or text/plain.A header is said to be asimple response header if theheader field name is an ASCII case-insensitive match for oneof the following:Cache-ControlContent-LanguageContent-TypeExpiresLast-ModifiedPragmaWhenparsing a header theheader must be parsed per the corresponding ABNFproduction in the syntax section. If the header doesnot match the production it is said thatheader parsing failed.4 Security ConsiderationsThis section is non-normative.Security requirements and considerations are listed throughout thisspecification. This section lists advice that did not fit anywhereelse.A simple cross-origin request has been defined as congruentwith those which may be generated by currently deployed user agents that donot conform to this specification. Simple cross-origin requests generatedoutside this specification (such as cross-origin form submissions usingGET or POST or cross-origin GETrequests resulting from script elements) typically includeuser credentials, so resources conforming to this specificationmust always be prepared to expect simple cross-origin requests withcredentials.Because of this, resources for which simple requests have significanceother than retrieval must protect themselves from Cross-Site Request Forgery(CSRF)by requiring the inclusion of an unguessable token in the explicitlyprovided content of the request.[CSRF]This specification defines how to authorize an instance of an applicationfrom a foreign origin, executing in the user agent, to access therepresentation of the resource in an HTTP response. Certain types ofresources should not attempt to specify particular authorized origins, butinstead either deny or allow all origins.A resource that is not useful to applications from other origins, such as a login page, ought not to return anAccess-Control-Allow-Originheader. The resource still must protect itself against CSRF attacks, suchas by requiring the inclusion of an unguessable token in the explicitlyprovided content of the request. The security properties of such resourcesare unaffected by user-agents conformant to this specification.A resource that is publicly accessible, with no access control checks,can always safely return anAccess-Control-Allow-Originheader whose value is "*".A GET response whose entity body happens to parse asECMAScript can return anAccess-Control-Allow-Originheader whose value is "*" provided there are no sensitivecomments as it can be accessed cross-origin using an HTMLscript element. If needed, such resources can implement accesscontrol and CSRF protections as described above.Requests made with user credentials,or the Origin headerrequire special consideration.When requests have significance other than retrieval, and when relying on the Origin header, resources must be careful to distinguish between authorizing a request (including its side-effects) and authorizing access to the representation of that resource in the response.Authorization for a request should be performed using only the intersection of the authority of the user and the requesting origin(s).It is often appropriate for resources to require an authorization ceremony which explicitly asks for a user to consent that cross-origin requests with credentials be honored from a given origin. In such cases, passing security tokens explicitly as part of the cross-origin request can remove any ambiguity as to the scope of authorization. OAuth is an example of this pattern.[OAUTH]Use of user credentials in a cross-origin request isappropriate when:A cross-origin request with credentials as defined in thisspecification is used to substitute for alternate methods ofauthenticated resource sharing, such as server-to-server back channels,JSONP, or cross-document messaging.[JSONP][HTML]This substitution can expose additional attack surface in some cases,as a cross-site scripting vulnerability in the requesting origin canallow elevation of privileges against the requested resource whencompared to a server-to-server back channel.As a substitute for JSONP-style cross-origin credentialed requests,use of this specification significantly improves the security posture ofthe requesting application, as it provides cross-origin data accesswhereas JSONP operates via cross-origin code-injection.As a substitute for cross-origin communication techniques relying on loading a resource, with credentials, into an HTML iframe element, and subsequently employing cross-document messaging or other cross-origin side channels, this specification provides a roughly equivalent security posture. Again, data received from origins that are not completely trusted has to be validated to conform to expected formats and authorized values.For requests to resources that have no significance other than retrieval, and where the credentials are used only to provide user-specific customization for otherwise publicly accessible information. In this case, restricting access to certain origins may protect user privacy by preventing customizations from being used to identify a user, except at authorized origins.When this specification is used for requests which have significanceother than retrieval and which involve coordination between or dataoriginating from more than two origins, (e.g. between resources enablingediting, printing and storage, each at distinct origins) requests ought toset the omit credentials flag and resources ought toperform authorization using security tokens explicitly provided in thecontent of the request, especially if the origins are not all mutually andcompletely trusted.In such multi-origin scenarios, a malicious resource at one of theorigins may be able to enlist the user-agent as a confused deputy andelevate its privileges by abusing user credentials sent with cross-originrequests. Avoidingsuch attacks requires that the coordinating applications have explicitknowledge of the scope of privilege for each origin and that allparameters and instructions received are carefully validated at each stepin the coordination to ensure that effects implied do not exceed theauthority of the originating principal.[CONFUSED]Given the difficulty of avoiding such vulnerabilities in multi-origininteractions it is recommended that, instead of using usercredentials automatically attached to the request by the user agent,security tokens which specify the particular capabilities andresources authorized be passed as part of the explicit content of a request.OAuth again provides an example of such a pattern.Authors of client-side Web applications are strongly encouraged tovalidate content retrieved from a cross-origin resource as itmight be harmful.Web applications that are not uniquely identified by specific host names,and/or mapped to specific ports, do not necessarily have a unique origin, andthus will not be able to securely utilize the mechanism defined in thisspecification. This is because an origin is composed of only thescheme, hostname, and port.For example, a web application whose URL is of the typeexample.org/app-name/ and the app-name portion is necessary to distinguish theweb application from other web applications also running at example.org, willbe unable to securely employ the mechanism defined in this specification.Mapping web applications to distinctoriginsis vital for secure web applications.5 SyntaxThis section defines the syntax of the new headers this specificationintroduces. It also provides a short description of the function of eachheader.The resource processing modelsection details how resources are to use these headers in a response.Likewise, theuser agent processing modelsection details how user agents are to use these headers.The ABNF syntax used in this section is from HTTP/1.1.[HTTP]HTTP/1.1 is used as ABNF basis to ensure that the newheaders have equivalent parsing rules to those introduced in thatspecification.HTTP/1.1 currently does not make leading OWS implied inheader value definitions but that form is assumed here.5.1 Access-Control-Allow-Origin Response HeaderTheAccess-Control-Allow-Originheader indicates whether a resource can be shared based by returning thevalue of the Origin request header, "*", or "null" in theresponse. ABNF:Access-Control-Allow-Origin = "Access-Control-Allow-Origin" ":" origin-list-or-null | "*"In practice theorigin-list-or-null production ismore constrained. Rather than allowing a space-separated list oforigins, it is either asingle origin or the string"null".5.2 Access-Control-Allow-Credentials Response HeaderTheAccess-Control-Allow-Credentialsheader indicates whether the response to request can beexposed when the omit credentials flag is unset. When partof the response to a preflight request it indicates that theactual request can include user credentials.ABNF:Access-Control-Allow-Credentials: "Access-Control-Allow-Credentials" ":" truetrue: %x74.72.75.65 ; "true", case-sensitive5.3 Access-Control-Expose-Headers Response HeaderTheAccess-Control-Expose-Headersheader indicates which headers are safe to expose to the API of aCORS API specification. ABNF:Access-Control-Expose-Headers = "Access-Control-Expose-Headers" ":" #field-name5.4 Access-Control-Max-Age Response HeaderTheAccess-Control-Max-Ageheader indicates how long the results of a preflight requestcan be cached in a preflight result cache. ABNF:Access-Control-Max-Age = "Access-Control-Max-Age" ":" delta-seconds5.5 Access-Control-Allow-Methods Response HeaderTheAccess-Control-Allow-Methodsheader indicates, as part of the response to apreflight request, which methods can be used during theactual request.The `Allow` header isnot relevant for the purposes of the CORS protocol.ABNF:Access-Control-Allow-Methods: "Access-Control-Allow-Methods" ":" #Method5.6 Access-Control-Allow-Headers Response HeaderTheAccess-Control-Allow-Headersheader indicates, as part of the response to apreflight request, which header field names can be usedduring the actual request. ABNF:Access-Control-Allow-Headers: "Access-Control-Allow-Headers" ":" #field-name5.7 Origin Request HeaderTheOriginheader indicates where the cross-origin request orpreflight request originates from.[ORIGIN]5.8 Access-Control-Request-Method Request HeaderTheAccess-Control-Request-Methodheader indicates which method will be used in theactual request as part of thepreflight request. ABNF:Access-Control-Request-Method: "Access-Control-Request-Method" ":" Method5.9 Access-Control-Request-Headers Request HeaderTheAccess-Control-Request-Headersheader indicates which headers will be used in theactual request as part of thepreflight request. ABNF:Access-Control-Request-Headers: "Access-Control-Request-Headers" ":" #field-name6 Resource Processing ModelThis section describes the processing models that resources have toimplement. Each type of request a resource might have to deal with isdescribed in its own subsection.The resource sharing policy described by this specification is bound toa particular resource. For the purposes of this section each resource isbound to the following:A list of origins consisting of zero or moreorigins that areallowed access to the resource.This can include theorigin of the resource itselfthough be aware that requests to cross-origin resources canbe redirected back to the resource.A list of methods consisting of zero or more methodsthat are supported by the resource.A list of headers consisting of zero or more headerfield names that are supported by the resource.A list of exposed headers consisting of zero or moreheader field names of headers other than thesimple response headers that the resource might use and can be exposed.A supports credentials flag that indicates whether theresource supports user credentials in the request. It istrue when the resource does and false otherwise.6.1 Simple Cross-Origin Request, Actual Request, andRedirectsIn response to a simple cross-origin request oractual request the resource indicates whether or not to sharethe response.If the resource has been relocated, it indicates whether to shareits new URL.Resources must use the following set of steps todetermine which additional headers to use in the response:If the Origin header is notpresent terminate this set of steps. The request is outside the scope ofthis specification.If the value of the Originheader is not a case-sensitive match for any of the valuesin list of origins, do not set any additional headers andterminate this set of steps.Always matching is acceptable since thelist of origins can be unbounded.If the resource supports credentials add a singleAccess-Control-Allow-Originheader, with the value of the Originheader as value, and add a singleAccess-Control-Allow-Credentialsheader with the case-sensitive string"true" as value.Otherwise, add a singleAccess-Control-Allow-Originheader, with either the value of theOrigin header or the string"*" as value.The string "*" cannot be used for aresource that supports credentials.If the list of exposed headers is not empty add oneor moreAccess-Control-Expose-Headersheaders, with as values the header field names given in thelist of exposed headers.By not adding the appropriate headers resource can alsoclear the preflight result cache of all entries whereorigin is a case-sensitivematch for the value of the Originheader and url is acase-sensitive match for theURL of theresource.6.2 Preflight RequestIn response to a preflight request the resource indicateswhich methods and headers (other thansimple methods andsimple headers) it is willing to handleand whether it supports credentials.Resources must use the following set of steps todetermine which additional headers to use in the response:If the Origin header is notpresent terminate this set of steps. The request is outside the scope ofthis specification.If the value of the Originheader is not a case-sensitive match for any of thevalues in list of origins do not set any additional headersand terminate this set of steps.Always matching is acceptable since thelist of origins can be unbounded.The Origin header canonly contain a single origin as theuser agent will not follow redirects.Let method be the value as result ofparsing theAccess-Control-Request-Methodheader.If there is noAccess-Control-Request-Methodheader or if parsing failed,do not set any additional headers and terminate this set of steps. Therequest is outside the scope of this specification.Let header field-names be the values as result ofparsing theAccess-Control-Request-Headersheaders.If there are noAccess-Control-Request-Headersheaders let header field-names be the empty list.If parsing failed do notset any additional headers and terminate this set of steps. The requestis outside the scope of this specification.If method is not a case-sensitivematch for any of the values in list of methods do not setany additional headers and terminate this set of steps.Always matching is acceptable since thelist of methods can be unbounded.If any of the header field-names is not aASCII case-insensitive match for any of the values inlist of headers do not set any additional headers andterminate this set of steps.Always matching is acceptable since thelist of headers can be unbounded.If the resource supports credentials add a singleAccess-Control-Allow-Originheader, with the value of the Originheader as value, and add a singleAccess-Control-Allow-Credentialsheader with the case-sensitive string"true" as value.Otherwise, add a singleAccess-Control-Allow-Originheader, with either the value of theOrigin header or the string"*" as value.The string "*" cannot be used for aresource that supports credentials.Optionally add a singleAccess-Control-Max-Ageheader with as value the amount of seconds the user agent is allowed tocache the result of the request.If method is a simple methodthis step may be skipped.Add one or moreAccess-Control-Allow-Methodsheaders consisting of (a subset of) thelist of methods.If a method is a simple method it does notneed to be listed, but this is not prohibited.Since the list of methods can be unbounded,simply returning the method indicated byAccess-Control-Request-Method (if supported)can be enough.If each of the header field-names is asimple header and none is Content-Type,this step may be skipped.Add one or moreAccess-Control-Allow-Headersheaders consisting of (a subset of) thelist of headers.If a header field name is a simple header andis not Content-Type, it is not required to be listed.Content-Type is to be listed as only a subset of its valuesmakes it qualify as simple header.Since the list of headers can be unbounded,simply returning supported headers from Access-Control-Allow-Headers can be enough.6.3 SecurityThis section is non-normative.Resource authors are strongly encouraged to ensure that requests usingsafe methods, e.g. GET or OPTIONS, have no sideeffects so potential attackers cannot modify the user's data easily. Ifresources are set up like this, attackers would effectively have to be onthe list of origins to do harm.In addition to checking the Originheader, resource authors are strongly encouraged to also check theHost header. That is, make sure that the host name providedby that header matches the host name of the server on which the resourceresides. This will provide protection against DNS rebinding attacks.To provide integrity protection of resource sharing policy statementsusage of SSL/TLS is encouraged.6.4 Implementation ConsiderationsThis section is non-normative.Resources that wish to enable themselves to be shared with multipleOrigins but do not respond uniformly with "*"must in practice generate the Access-Control-Allow-Originheader dynamically in response to every request they wishto allow. As a consequence, authors of such resources should send aVary: Origin HTTP header or provide other appropriate controldirectives to prevent caching of such responses, which may be inaccurateif re-used across-origins.7 User Agent Processing ModelThis section describes the processing models that user agents have toimplement.The processing models in this sections need to be referenced by aCORS API specification that defines when the algorithm is invoked and howthe return values are to be handled. The processing models are notsuitable for standalone use.7.1 Cross-Origin RequestThe cross-origin requestalgorithm takes the following parameters:request URLThe URL to befetched.The request URL is modified in face ofredirects.request methodThe method for the request. GET, unless explicitlyset.author request headersA list of headers set by authors for the request. Empty, unlessexplicitly set.request entity bodyThe entity body for the request. Missing, unless explicitlyset.source originThe origin of the request.Due to the specifics of some APIs this cannot be definedin a generic way and therefore it has to be provided as argument.referrer sourceEither a Document orURL. Used to determine theReferer header.manual redirect flagSet when redirects are not to be automatically followed.omit credentials flagSet when user credentials are to be excluded in therequest and when cookies are to be ignored in its response.force preflight flagSet when a preflight request is required.The cross-origin request algorithm can be used byCORS API specifications who wish to allow cross-origin requests for thenetwork APIs they define.CORS API specifications are free to limit the abilities ofa cross-origin request. E.g., theomit credentials flag could always be set.When the cross-origin request algorithm is invoked,these steps must be followed:If for some reason the user agent does not want to make the requestterminate this algorithm and set thecross-origin request status to network error.The request URL could have been blacklistedby the user in some fashion.If the following conditions are true, follow thesimple cross-origin request algorithm:The request method is asimple method and the force preflight flag isunset.Each of the author request headers is asimple header or author request headers isempty.Otherwise, follow thecross-origin request with preflight algorithm.Cross-origin requests using a method that issimple withauthor request headers that are notsimple will have apreflight request to ensure that the resource can handlethose headers. (Similarly to requests using a method that is not asimple method.)7.1.1 Handling a Response to a Cross-Origin RequestUser agents must filter out all response headersother than those that are a simple response header or ofwhich the field name is an ASCII case-insensitive match forone of the values of theAccess-Control-Expose-Headersheaders (if any), before exposing response headers to APIs defined inCORS API specifications.ThegetResponseHeader()method of XMLHttpRequest will thereforenot expose any header not indicated above.7.1.2 Cross-Origin Request StatusEach cross-origin request has an associatedcross-origin request statusthat CORS API specifications that enable an API to makecross-origin requests can hookinto. It can take at most two distinct values over the course of across-origin request. The values are:preflight completeThe user agent is about to make the actual request.successThe resource can be shared.abort errorThe user aborted the request.network errorThe resource cannot be shared. Also used when a DNS error, TLSnegotiation failure, or other type of network error occurs.This does not include HTTP responses that indicate sometype of error, such as HTTP status code 410.7.1.3 Source OriginThe source origin is the initialorigin that user agents must use forthe Origin header. It can be modifiedduring the redirect steps.7.1.4 Simple Cross-Origin RequestThe steps below describe what user agents must dofor asimple cross-origin request:Apply the make a request steps and observe therequest rules below while making the request.If the manual redirect flag is unset and the responsehas an HTTP status code of 301, 302, 303, 307, or 308Apply the redirect steps.If the end user cancels the requestApply the abort steps.If there is a network errorIn case of DNS errors, TLS negotiation failure, or other type ofnetwork errors, apply the network error steps. Do notrequest any kind of end user interaction.This does not include HTTP responses that indicatesome type of error, such as HTTP status code 410.OtherwisePerform a resource sharing check. If it returnsfail, apply the network error steps. Otherwise, if itreturns pass, terminate this algorithm and set thecross-origin request status to success. Do notactually terminate the request.7.1.5 Cross-Origin Request with PreflightTo protect resources against cross-origin requests that could notoriginate from certain user agents before this specification existed apreflight request is made to ensure that the resource isaware of this specification. The result of this request is stored in apreflight result cache.The steps below describe what user agents must dofor across-origin request with preflight.This is a request to a non same-origin URL that first needs to beauthorized using either a preflight result cache entry or apreflight request.Go to the next step if the following conditions are true:For request method there either is amethod cache match or it is asimple method and the force preflight flagis unset.For every header of author request headersthere either is a header cache match for the field nameor it is a simple header.Otherwise, make apreflight request.Fetch the request URLfrom origin source origin usingreferrer source as override referrer sourcewith the manual redirect flag and theblock cookies flag set, using the methodOPTIONS, and with the following additional constraints:Include anAccess-Control-Request-Methodheader with as header field value the request method (evenwhen that is a simple method).If author request headers is not empty include anAccess-Control-Request-Headersheader with as header field value a comma-separated list of the headerfield names from author request headers in lexicographicalorder, each converted to ASCII lowercase (even when one ormore are a simple header).Exclude the author request headers.Exclude user credentials.Exclude the request entity body.The following request rules are to be observed while makingthe preflight request:If the end user cancels the requestApply the abort steps.If the response has an HTTP status code that is not in the 2xx rangeApply the network error steps.The cache and network error steps are notused here as this is about an actual network error.If there is a network errorIn case of DNS errors, TLS negotiation failure, or other type ofnetwork errors, apply the network error steps. Do notrequest any kind of end user interaction.This does not include HTTP responses that indicatesome type of error, such as HTTP status code 410.The cache and network error steps are notused here as this is about an actual network error.Otherwise (the HTTP status code is in the 2xx range)If the resource sharing check returns fail,apply the cache and network error steps.Let methods be the empty list.If there are one or moreAccess-Control-Allow-Methodsheaders let methods be the values as result ofparsing the headers.If parsing failedapply the cache and network error steps.If methods is still the empty list and theforce preflight flag is set, append therequest method to methods.This ensures thatpreflight requests thathappened solely because of the force preflight flag arecached too.Let headers be the empty list.If there are one or moreAccess-Control-Allow-Headersheaders let headers be the values as result ofparsing the headers.If parsing failedapply the cache and network error steps.If request method is not acase-sensitive match for any method inmethods and is not a simple method,apply the cache and network error steps.If the field name of each header inauthor request headers is not anASCII case-insensitive match for one of theheader field names in headers and the header isnot a simple header, apply thecache and network error steps.If for some reason the user agent is unable to provide apreflight result cache (e.g. because of limited diskspace) go to the next step in the overall set of steps (i.e. theactual request).If there is a singleAccess-Control-Max-Ageheader, parse it and letmax-age be the resulting value.If there is no such header, there is more than one such header,or parsing failed, letmax-age be a value at the discretion of the useragent (zero is allowed).If the user agent imposes a limit on themax-age field value andmax-age is greater than that limit letmax-age be the limit.For each method in methods for which there isa method cache match set themax-age field value of thematching entry to max-age.For each method in methods for which there isno method cache match create a new entry inthe preflight result cache with the various fields setas follows:originThe source origin.urlThe request URL.max-ageThe max-age.credentialsFalse if the omit credentials flag is set, or trueotherwise.methodThe given method.headerEmpty.For each header in headers for which there isa header cache match set themax-age field value of thematching entry to max-age.For each header in headers for which there isno header cache match create a new entry inthe preflight result cache with the various fields setas follows:originThe source origin.urlThe request URL.max-ageThe max-age.credentialsFalse if the omit credentials flag is set, or trueotherwise.methodEmpty.headerThe given header.Set the cross-origin request status topreflight complete.This is the actual request. Apply themake a request steps and observe the request rulesbelow while making the request.If the response has an HTTP status code of 301, 302, 303, 307, or 308Apply the cache and network error steps.If the end user cancels the requestApply the abort steps.If there is a network errorIn case of DNS errors, TLS negotiation failure, or other type ofnetwork errors, apply the network error steps. Do notrequest any kind of end user interaction.This does not include HTTP responses that indicatesome type of error, such as HTTP status code 410.OtherwisePerform a resource sharing check. If it returnsfail, apply the cache and network error steps. Otherwise,if it returns pass, terminate this algorithm and set thecross-origin request status to success. Do notactually terminate the request.Consider the following scenario:The user agent gets the request from an API, such asXMLHttpRequest, to perform across-origin request using the custom XMODIFY method fromsource origin http://example.org tohttp://blog.example/entries/hello-world.The user agent performs a preflight request usingthe OPTIONS method tohttp://blog.example/entries/hello-world and includes theOrigin andAccess-Control-Request-Methodheaders with the appropriate values.The response to that request includes the following headers:Access-Control-Allow-Origin: http://example.orgAccess-Control-Max-Age: 2520Access-Control-Allow-Methods: PUT, DELETE, XMODIFYThe user agent then performs the desired request using theXMODIFY method tohttp://blog.example/entries/hello-world as this was allowedby the resource. In addition, for the coming forty-two minutes, nopreflight request will be needed.7.1.6 Preflight Result CacheAs mentioned, a cross-origin request with preflightuses a preflight result cache. Thiscache consists of a set of entries. Each entry consists of the followingfields:originHolds the source origin.urlHolds the request URL.max-ageHolds theAccess-Control-Max-Ageheader value.credentialsFalse if the omit credentials flag is set, or trueotherwise.methodEmpty if header is not empty;otherwise one of the values from theAccess-Control-Allow-Methodsheaders.headerEmpty if method is not empty;otherwise one of the values from theAccess-Control-Allow-Headersheaders.To be clear, the methodand header fields are mutuallyexclusive. When one of them is empty the other is non-empty.The primary key of an entry consists of all fieldsexcluding the max-age field.Entries must be removed when the time specified inthe max-age field has passed sincestoring the entry. Entries can also be added and removed per thealgorithms below. They are added and removed in such a way that there cannever be duplicate items in the cache.User agents may clear cache entries before thetime specified in the max-age field haspassed.Although this effectively makes thepreflight result cache optional, user agents are stronglyencouraged to support it.7.1.7 Generic Cross-Origin Request AlgorithmsThe variables used in the generic set of steps are part of thealgorithms that invoke these set of steps.Whenever the make a request steps are applied,fetch the request URL fromorigin source origin usingreferrer source as override referrer source withthe manual redirect flag set, and theblock cookies flag set if theomit credentials flag is set. Use methodrequest method, entity body request entity body,including the author request headers, and includeuser credentials if the omit credentials flag is unset.Whenever the redirect steps are applied,follow this set of steps:Let original URL be the request URL.Let request URL be theURL conveyed bythe Location header in the redirect response.If the request URL <scheme> is not supported,infinite loop precautions are violated, or the user agent does not wishto make the new request for some other reason, apply thenetwork error steps.If the request URL contains theuserinfo production apply thenetwork error steps.If the resource sharing check for the currentresource returns fail, apply the network error steps.If the request URLorigin is notsame origin with theoriginal URL origin, setsource origin to a globally unique identifier (becomes"null" when transmitted).Transparently follow the redirect while observing the set ofrequest rules.Whenever the abort steps are applied,terminate the algorithm that invoked this set of steps and set thecross-origin request status to abort error.Whenever the network error stepsare applied, terminate the algorithm that invoked this set of steps andset the cross-origin request status tonetwork error.This has no effect on setting ofuser credentials. I.e. if the block cookies flagis unset, cookies will be set by the response.Whenever thecache and network error stepsare applied, follow these steps:Remove the entries in the preflight result cachewhere origin field value is acase-sensitive match for source originand url field value is acase-sensitive match for request URL.Apply the network error steps acting as if thealgorithm that invoked the cache and network error stepsinvoked the network error steps instead.There is acache matchwhen there is a cache entry in the preflight result cachefor which the following is true:The origin field value is acase-sensitive match forsource origin.The url field value is acase-sensitive match forrequest URL.The credentials field valueis true and the omit credentials flag is unset, or it is false andthe omit credentials flag is set.There is amethod cache matchwhen there is a cache entry for which there is a cache matchand the method field value is acase-sensitive match for the given method.There is aheader cache matchwhen there is a cache entry for which there is a cache matchand the header field value is anASCII case-insensitive match for the given header fieldname.7.2 Resource Sharing CheckThe resource sharing checkalgorithm for a given resource is as follows:If the response includes zero or more than oneAccess-Control-Allow-Originheader values, return fail and terminate this algorithm.If theAccess-Control-Allow-Originheader value is the "*" character and theomit credentials flag is set, return pass and terminate thisalgorithm.If the value ofAccess-Control-Allow-Originis not a case-sensitive match for the value of theOrigin header as defined by itsspecification, return fail and terminate this algorithm.If the omit credentials flag is unset and the responseincludes zero or more than oneAccess-Control-Allow-Credentialsheader values, return fail and terminate this algorithm.If the omit credentials flag is unset and theAccess-Control-Allow-Credentialsheader value is not a case-sensitive match for"true", return fail and terminate this algorithm.Return pass.The above algorithm also functions when theASCII serialization of an origin isthe string "null".7.3 SecurityThis section is non-normative.At various places user agents are allowed to take additionalprecautions. E.g. user agents are allowed to not store cache items, removecache items before they reached theirmax-age, and not connect to certainURLs.User agents are encouraged to impose a limit onmax-age so items cannot stay in thepreflight result cache for unreasonable amounts of time.As indicated as the first step of the cross-origin requestalgorithm and in the redirect steps algorithm user agentsare allowed to terminate the algorithm and not make a request. This couldbe done because e.g.:The origin of the resource blacklisted.The origin of the resource is known to be part of anintranet.The URL <scheme> is not supported.https to http is not allowed.https is not allowed because of certificate errorsUser agents are encouraged to apply security decisions on a genericlevel and not just to the resource sharing policy. E.g. if a user agentdisallows requests from the https to the httpscheme for a cross-origin request it is encouraged to do thesame for the HTML img element.8 CORS API Specification AdviceThis section is non-normative.This specification defines a resource sharing policy that cannot beimplemented without an API that utilizes it. The specification thatdefines the API that uses the policy is a CORS API specification.In case a CORS API specification defines multiple APIs that utilize thepolicy the advice is to be considered separately for each API.8.1 Constructing a Cross-Origin RequestFor all cross-origin requests that APIs can make forwhich the resource sharing policy in this specification is supposed toapply, the CORS API specification needs to reference thecross-origin request algorithm and set the following inputvariables appropriately: request URL,request method, author request headers,request entity body, source origin,manual redirect flag, omit credentials flag,and the force preflight flag.CORS API specifications are allowed to let these input variables becontrolled by the API, but can also set fixed values.A CORS API specification for an API that only allowsrequests using the GET method might setrequest method to GET,request entity body to empty, and source originto some appropriate value and let the other variables be controlled by theAPI.8.2 Dealing with Same Origin to Cross-Origin RedirectsSince browsers are based on asame origin security model and thepolicy outlined in this specification is intended for APIs used inbrowsers, it is expected that APIs that will utilize this policy will haveto handle a same origin request thatresults in a redirect that is cross-origin in a specialway.For APIs that transparently handle redirects CORS API specificationsare encouraged to handle this scenario transparently as well by "catching"the redirect and invoking the cross-origin request algorithmon the (cross-origin) redirect URL.The XMLHttpRequest specification does this.[XHR]8.3 Dealing with theCross-Origin Request StatusWhile a cross-origin request is progressing itsassociated cross-origin request status is updated.Depending on the value of the cross-origin request status theAPI is to react in a different way:preflight completeFeatures that can only be safely exposed after apreflight request can now be enabled.E.g. upload progress events forXMLHttpRequest.successThe contents of the response can be shared with the API, includingheaders that have not been filtered out.The request itself can still be progressing. I.e. thecross-origin request status value does not indicate thatthe request has completed.abort errorHandle analogous to requests where the user aborted the request.This can be handled equivalently to how network error ishandled. Ensure not to reveal any further information about therequest.network errorHandle analogous to requests where some kind of erroroccurred. Ensure not the reveal any further information about therequest.8.4 SecuritySimilarly to same origin requests,CORS API specifications are encouraged to properly limit headers, methods,and user credentials the author can set and get for requeststhat are cross-origin.Reviewing the XMLHttpRequest specification provides a goodstart for the kind of limitations that are to be imposed.[XHR]CORS API specifications also need to ensure not to reveal anythinguntil the cross-origin request status is set topreflight complete or success to prevent e.g. portscanning.In XMLHttpRequest progress events are dispatchedonly after the cross-origin request status is set tosuccess. Upload progress events are only dispatched once thecross-origin request status is preflight complete.References[CONFUSED](Non-normative) The Confused Deputy, Norm Hardy.[COOKIES]HTTP State Management Mechanism, Adam Barth. IETF.[CSRF](Non-normative) Cross-Site Request Forgeries, Peter Watkins.[EVENTSOURCE](Non-normative) Server-Sent Events, Ian Hickson. W3C.[HTML]HTML5, Berjon, Leithead, Navara, O'Connor, Pfeiffer and Hickson. W3C.[HTTP]Hypertext Transfer Protocol -- HTTP/1.1, Roy Fielding, James Gettys, Jeffrey Mogul et al.. IETF.[308]The Hypertext Transfer Protocol (HTTP) Status Code 308 (Permanent Redirect), Julian Reschke. IETF.[JSONP](Non-normative) JSONP, Bob Ippolito.[OAUTH](Non-normative) The OAuth 1.0 Protocol, Eran Hammer-Lahav. IETF.[ORIGIN]The Web Origin Concept, Adam Barth. IETF.[RFC2119]Key words for use in RFCs to Indicate Requirement Levels, Scott Bradner. IETF.[URI]Uniform Resource Identifier (URI): Generic Syntax, Tim Berners-Lee, Roy Fielding and Larry Masinter. IETF.[XHR](Non-normative) XMLHttpRequest, Anne van Kesteren. W3C.AcknowledgmentsThis appendix is non-normative.The editor would like to thankAdam Barth,Alexey Proskuryakov,Arne Johannessen,Arthur Barstow,Benjamin Hawkes-Lewis,Bert Bos,Björn Höhrmann,Boris Zbarsky,Brad Hill,Cameron McCormack,Collin Jackson,David Håsäther,David Orchard,Dean Jackson,Eric Lawrence,Frank Ellerman,Frederick Hirsch,Graham Klyne,Hal Lockhart,Henri Sivonen,Ian Hickson,Jesse M. Heines,Jonas Sicking,Julian Reschke,Lachlan Hunt,??? (Kang-Hao Lu),Maciej Stachowiak,Marc Silbey,Marcos Caceres,Mark Nottingham,Mark S. Miller,Martin Dürst,Matt Womer,Mhano Harkness,Michael Smith,Mohamed Zergaoui,Nikunj Mehta,Odin Hørthe Omdal,Philip Jägenstedt,Sharath Udupa,Simon Pieters,Sunava Dutta,Surya Ismail,Thomas Roessler,Tyler Close,Jeff Hodges,Vladimir Dzhuvinov,Wayne Carr, andZhenbin Xufor their contributions to this specification.Special thanks to Brad Porter, Matt Oshry and R. Auburn, who all helpedediting earlier versions of this document.