Offline Web Applicationscode { color:orangered }src="http://www.w3.org/Icons/w3c_home" width=72>Offline Web ApplicationsW3C Working Group Note 30 May 2008This Version:href="http://www.w3.org/TR/2008/NOTE-offline-webapps-20080530/">http://www.w3.org/TR/2008/NOTE-offline-webapps-20080530/Latest Version:href="http://www.w3.org/TR/offline-webapps/">http://www.w3.org/TR/offline-webapps/Editors:Anne van Kesteren (href="http://www.opera.com/">Opera Software ASA) <href="mailto:annevk@opera.com">annevk@opera.com>Ian Hickson, Google, Inc.href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright© 2008Consortium">W3C® (href="http://www.csail.mit.edu/">Technology">MIT,title="European Research Consortium for Informatics andMathematics">ERCIM,href="http://www.keio.ac.jp/">Keio), All Rights Reserved. W3Chref="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability,href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademarkandhref="http://www.w3.org/Consortium/Legal/copyright-documents">documentuse rules apply.AbstractHTML 5 contains several features that address the challenge ofbuilding Web applications that work while offline. This documenthighlights these features (SQL, offline application caching APIs as wellas online/offline events, status, and thelocalStorage API) from HTML 5 and provides brieftutorials on how these features might be used to create Web applicationsthat work offline. [HTML5]Status of This DocumentThis section describes the status of this document at the time ofits publication. Other documents may supersede this document. A list ofcurrent W3C publications and the latest revision of this technical reportcan be found in the W3C technical reportsindex at http://www.w3.org/TR/.Offline Web Applications is a Working Group Note produced by thehref="http://www.w3.org/html/wg/">HTML Working Group, part of thehref="http://www.w3.org/MarkUp/Activity">HTML Activity. Comments arewelcome on thehref="mailto:public-html-comments@w3.org">public-html-comments@w3.orgmailing list which ishref="http://lists.w3.org/Archives/Public/public-html-comments/">publiclyarchived.Publication as a Working Group Note does not imply endorsement by theW3C Membership. This is a draft document and may be updated, replaced orobsoleted by other documents at any time. It is inappropriate to cite thisdocument as other than work in progress.This document was produced by a group operating under thehref="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February2004 W3C Patent Policy. The group does not expect this document tobecome a W3C Recommendation. W3C maintains ahref="http://www.w3.org/2004/01/pp-impl/40318/status"rel=disclosure>public list of any patent disclosures made inconnection with the deliverables of the group; that page also includesinstructions for disclosing a patent. An individual who has actualknowledge of a patent which the individual believes containshref="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">EssentialClaim(s) must disclose the information in accordance withhref="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section6 of the W3C Patent Policy.Table of Contents1. Introduction2. SQL3. Offline ApplicationCaching APIs4. Related APIsReferencesAcknowledgments1. IntroductionUsers of typical online Web applications are only able to use theapplications while they have a connection to the Internet. When they gooffline, they can no longer check their e-mail, browse their calendarappointments, or prepare presentations with their online tools. Meanwhile,native applications provide those features: e-mail clients cache folderslocally, calendars store their events locally, presentation packages storetheir data files locally.In addition, while offline, users are dependent on their HTTP cache toobtain the application at all, since they cannot contact the server to getthe latest copy.The HTML 5 specification provides two solutions to this: ahref="http://www.w3.org/html/wg/html5/#sql">SQL-based database API forstoring data locally, and anhref="http://www.w3.org/html/wg/html5/#offline">offline application HTTPcache for ensuring applications are available even when the user isnot connected to their network.2. SQLThe client-side SQL database in HTML 5 enables structured datastorage. This can be used to store e-mails locally for an e-mailapplication or for a cart in an online shopping site. The API to interactwith this database is asynchronous which ensures that the user interfacedoesn't lock up. Because database interaction can occur in multiplebrowser windows at the same time the API supports transactions.To create a database object you use the openDatabase()method on the Window object. It takes four arguments: adatabase name, a database version, a display name, and an estimated size,in bytes, of the data to be stored in the database. For instance:var db = openDatabase("notes", "", "The Example Notes App!", 1048576);Now on this database we can use the transaction() method.The transaction method takes one to three arguments: a transactioncallback, an error callback, and a success callback. The transactioncallback gets passed a SQL transaction object on which you can use theexecuteSQL() method. This method takes from one to fourarguments: a SQL statement, arguments, a SQL statement callback, and a SQLstatement error callback. The SQL statement callback gets passed thetransaction object and a SQL statement result object which gives access tothe rows, last inserted ID, et cetera.To complete the infrastructure for the notes application we'd add thefollowing code:function renderNote(row) {// renders the note somewhere}function reportError(source, message) {// report error}function renderNotes() {db.transaction(function(tx) {tx.executeSql('CREATE TABLE IF NOT EXISTS Notes(title TEXT, body TEXT)',[]);tx.executeSql(â€˜SELECT * FROM Notesâ€™, [], function(tx, rs) {for(var i = 0; i < rs.rows.length; i++) {renderNote(rs.rows[i]);}});});}function insertNote(title, text) {db.transaction(function(tx) {tx.executeSql('INSERT INTO Notes VALUES(?, ?)', [ title, text ],function(tx, rs) {// …},function(tx, error) {reportError('sql', error.message);});});}3. Offline Application Caching APIsThe mechanism for ensuring Web applications are available even when theuser is not connected to their network is thetitle=attr-html-manifest>manifest attribute on thehtml element.The attribute takes a URI to a manifest, which specifies which files areto be cached. The manifest has a text/cache-manifest MIMEtype. A typical file looks like this:CACHE MANIFESTindex.htmlhelp.htmlstyle/default.cssimages/logo.pngimages/backgound.pngNETWORK:server.cgiThis file specifies several files to cache, and then specifies thatserver.cgi should never be cached, so that anyattempt to access that file will bypass the cache.The manifest can then be linked to by declaring it in the (HTML)application, like this:<!DOCTYPE HTML><html manifest="cache-manifest">...The server.cgi file would be white-listed (put inthe NETWORK: section) so that it can be contacted toget updates from the server, as in:<event-source src="server.cgi">(The event-source element is a new feature in HTML 5that allows servers to continuously stream updates to a Web page.)The application cache mechanism also supports a way to opportunisticallycache (from the server) a group of files matching a common prefix, withthe ability to have a fallback page for rendering those pages whenoffline. It also provides a way for scripts to add and remove entries fromthe cache dynamically, and a way for applications to atomically updatetheir cache to new files, optionally presenting custom UI during theupdate.4. Related APIsIn addition to those APIs HTML 5 also defines anonLine attribute on the Navigator object so youcan determine whether you are currently online:var online = navigator.onLine;Changes to this attribute are indicated through the onlineand offline events that are both dispatched on theWindow object.For simple synchronous storage access HTML 5 introduces thelocalStorage attribute on the Window object:localStorage["status"] = "Idling.";References[HTML5] (work in progress)href="http://www.whatwg.org/specs/web-apps/current-work/">HTML 5,I. Hickson, editor. WHATWG, 2008.href="http://www.whatwg.org/specs/web-forms/current-work/">Web Forms2.0, I. Hickson, editor. WHATWG, October 2006.href="http://www.w3.org/html/wg/html5/">HTML 5, I.Hickson, D. Hyatt, editors. W3C, 2008.Web Forms2.0, I. Hickson, editor. W3C, October 2006.AcknowledgmentsThe editors would like to thank Chris Wilson, Dion Almaer, James Graham,Julian Reschke, Henri Sivonen, Patrick D. F. Ion, and Philip Taylor fortheir contributions to this document. Also thanks to Dan Connolly fortalking us into writing it during the first HTML WG meeting (in Boston).