Metadata API for Media Resources 1.0alt="W3C" src="http://www.w3.org/Icons/w3c_home" />Metadata API for Media Resources 1.0W3C Recommendation 13 March 2014This version:http://www.w3.org/TR/2014/REC-mediaont-api-1.0-20140313/Latest published version:http://www.w3.org/TR/mediaont-api-1.0/Previous version:http://www.w3.org/TR/2013/PR-mediaont-api-1.0-20131015/Editors:Florian Stegmaier, University of PassauWerner Bailer, JOANNEUM RESEARCHMartin HÃ¶ffernig, JOANNEUM RESEARCHì?´ì›?ì„?(Wonsuk Lee), Samsung Electronics, Ltd.Chris Poppe, Ghent UniversityPlease refer to the erratafor this document, which may include some normative corrections.See alsotranslations.CopyrightÂ© 2014 W3CÂ®(MIT,ERCIM,Keio, Beihang),All Rights Reserved. W3C liability,trademarkand documentuse rules apply.AbstractThis specification defines an API to access metadata informationrelated to media resources on the Web. The overall purpose is to providedevelopers with a convenient access to metadata information stored indifferent metadata formats. The API provides means to access the set ofmetadata properties defined in the Ontologyfor Media Resources 1.0 specification. These propertiesare used as a pivot vocabulary in this API. The core of thisspecification is the definition of API interfaces for retrievingmetadata information in synchronous and asynchronous modes. It also definesinterfaces for structured return types along with the specification ofthe behavior of an API implementation.Status of This DocumentThis section describes the status of this document at the time ofits publication. Other documents may supersede this document. A listof current W3C publications and the latest revision of this technicalreport can be found in the W3Ctechnical reports index at http://www.w3.org/TR/.This document has been reviewed by W3C Members, by software developers,and by other W3C groups and interested parties, and is endorsed by theDirector as a W3C Recommendation. It is a stable document and may beused as reference material or cited from another document. W3C's role inmaking the Recommendation is to draw attention to the specification andto promote its widespread deployment. This enhances the functionalityand interoperability of the Web.This document has been produced by the MediaAnnotations Working Group, which is part of the W3CVideoon the Web Activity.Â The public is encouraged to send comments on this Recommendation to thepublic mailing list public-media-annotation@w3.org(publicarchive). Use "[REC Comment API]" in the subject line of youremail.The Working Group has adopted a publictestsuite and has produced an implementationreport for this Metadata API for Media Resources 1.0.No changes to this document have been made since the previous version.The Metadata API for Media Resources may be implemented in both client-only(built into a browser, as a plugin or as a JavaScript library) andclient-server (server-side as a Web Service). The level ofimplementation of this API in these two scenario summarized in the implementationreport allowed to exit Candidate Recommendation. Nevertheless thisAPI is not expected to be implemented natively in the browser code.This document was produced by a group operating under the 5February 2004 W3C Patent Policy. W3C maintains a publiclist of any patent disclosures made in connection with thedeliverables of the group; that page also includes instructions fordisclosing a patent. An individual who has actual knowledge of a patentwhich the individual believes contains EssentialClaim(s) must disclose the information in accordance with section6of the W3C Patent Policy.Table of Contents1.Introductionclass="secno">1.1 Formats in scopeclass="secno">1.2 Formats out of scope1.3Terminology2.Conformanceclass="secno">3. Design consideration4.API Description4.1MediaResource interface4.1.1Methodsclass="secno">4.1.2 Examples in Javascript4.2AsyncMediaResource interface4.2.1Methodsclass="secno">4.2.2 Callback interfacesclass="secno">4.2.2.1 PropertyCallbackinterfaceclass="secno">4.2.2.1.1 Methodsclass="secno">4.2.2.2 MetadataCallbackinterfaceclass="secno">4.2.2.2.1 Methodsclass="secno">4.2.3 Examples in Javascript4.3SyncMediaResource interface4.3.1Methodsclass="secno">4.3.2 Examples in Javascriptclass="secno">4.4 MediaAnnotationinterfaceclass="secno">4.4.1 Attributesclass="secno">4.4.2 Example in JavaScript4.5Propertiesclass="secno">4.5.1 Identification Propertiesclass="secno">4.5.1.1 Identifierclass="secno">4.5.1.1.1 Attributesclass="secno">4.5.1.1.2 Example inJavaScriptclass="secno">4.5.1.2 Titleclass="secno">4.5.1.2.1 Attributesclass="secno">4.5.1.2.2 Example inJavaScriptclass="secno">4.5.1.3 Languageclass="secno">4.5.1.3.1 Attributesclass="secno">4.5.1.3.2 Example inJavaScriptclass="secno">4.5.1.4 Locatorclass="secno">4.5.1.4.1 Attributesclass="secno">4.5.1.4.2 Example inJavaScriptclass="secno">4.5.2 Creation Propertiesclass="secno">4.5.2.1 Contributorclass="secno">4.5.2.1.1 Attributesclass="secno">4.5.2.1.2 Example inJavaScriptclass="secno">4.5.2.2 Creatorclass="secno">4.5.2.2.1 Attributesclass="secno">4.5.2.2.2 Example inJavaScriptclass="secno">4.5.2.3 MADateclass="secno">4.5.2.3.1 Attributesclass="secno">4.5.2.3.2 Example inJavaScriptclass="secno">4.5.2.4 Locationclass="secno">4.5.2.4.1 Attributesclass="secno">4.5.2.4.2 Example inJavaScriptclass="secno">4.5.3 Content Propertiesclass="secno">4.5.3.1 Descriptionclass="secno">4.5.3.1.1 Attributesclass="secno">4.5.3.1.2 Example inJavascriptclass="secno">4.5.3.2 Keywordclass="secno">4.5.3.2.1 Attributesclass="secno">4.5.3.2.2 Example inJavascript4.5.3.3Genreclass="secno">4.5.3.3.1 Attributesclass="secno">4.5.3.3.2 Example inJavascriptclass="secno">4.5.3.4 Ratingclass="secno">4.5.3.4.1 Attributesclass="secno">4.5.3.4.2 Example inJavascriptclass="secno">4.5.4 Relational Propertiesclass="secno">4.5.4.1 Relationclass="secno">4.5.4.1.1 Attributesclass="secno">4.5.4.1.2 Example inJavascriptclass="secno">4.5.4.2 Collectionclass="secno">4.5.4.2.1 Attributesclass="secno">4.5.4.2.2 Example inJavascriptclass="secno">4.5.5 Rights Propertiesclass="secno">4.5.5.1 Copyrightclass="secno">4.5.5.1.1 Attributesclass="secno">4.5.5.1.2 Example inJavascriptclass="secno">4.5.5.2 Policyclass="secno">4.5.5.2.1 Attributesclass="secno">4.5.5.2.2 Example inJavascriptclass="secno">4.5.6 Distribution Propertiesclass="secno">4.5.6.1 Publisherclass="secno">4.5.6.1.1 Attributesclass="secno">4.5.6.1.2 Example inJavascriptclass="secno">4.5.6.2 TargetAudienceclass="secno">4.5.6.2.1 Attributesclass="secno">4.5.6.2.2 Example inJavascriptclass="secno">4.5.7 Fragments Propertiesclass="secno">4.5.7.1 Fragmentclass="secno">4.5.7.1.1 Attributesclass="secno">4.5.7.1.2 Example inJavascriptclass="secno">4.5.7.2 NamedFragmentclass="secno">4.5.7.2.1 Attributesclass="secno">4.5.7.2.2 Example inJavascriptclass="secno">4.5.8 Technical Propertiesclass="secno">4.5.8.1 FrameSizeclass="secno">4.5.8.1.1 Attributesclass="secno">4.5.8.1.2 Example inJavascriptclass="secno">4.5.8.2 Compressionclass="secno">4.5.8.2.1 Attributesclass="secno">4.5.8.2.2 Example inJavascriptclass="secno">4.5.8.3 Durationclass="secno">4.5.8.3.1 Attributesclass="secno">4.5.8.3.2 Example inJavascriptclass="secno">4.5.8.4 Formatclass="secno">4.5.8.4.1 Attributesclass="secno">4.5.8.4.2 Example inJavascriptclass="secno">4.5.8.5 SamplingRateclass="secno">4.5.8.5.1 Attributesclass="secno">4.5.8.5.2 Example inJavascriptclass="secno">4.5.8.6 FrameRateclass="secno">4.5.8.6.1 Attributesclass="secno">4.5.8.6.2 Example inJavascriptclass="secno">4.5.8.7 AverageBitRateclass="secno">4.5.8.7.1 Attributesclass="secno">4.5.8.7.2 Example inJavascriptclass="secno">4.5.8.8 NumTracksclass="secno">4.5.8.8.1 Attributesclass="secno">4.5.8.8.2 Example inJavascriptclass="secno">4.6 MetadataSourceinterfaceclass="secno">4.6.1 Attributesclass="secno">4.6.2 Examples in Javascriptclass="secno">4.7 API Status Codes5.Usage examples5.1Usage as JavaScript APIclass="secno">5.2 Usage as Web Serviceclass="secno">6. Implementation Notesclass="secno">6.1 Multiple identifiers of mediaresources orfragementsclass="secno">6.2 Missing fragment identifiersclass="secno">6.3 Interoperability of Implementationsclass="secno">7. Security ConsiderationsA.Web IDL descriptionChange logB.AcknowledgementsC.Referencesclass="secno">C.1 Normative referencesclass="secno">C.2 Informative references###############################################################Section: Introduction########################################################################################################################## -->1. IntroductionThis specification defines an API to access metadata informationrelated to media resources on the Web. The overall purpose is to providedevelopers with a convenient access to metadata information stored indifferent metadata formats. The coreproperties, defined in the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY],will be used as a pivot vocabulary in this API. The description ofrelations between these core properties and the metadataformats in scope are documented in the Ontology for MediaResources 1.0 specification [MEDIA-ONTOLOGY]in order to provide cross-community data integration. This API isdescribed using the interface definition language Web IDL [rel="biblioentry" class="bibref">WEBIDL]. The decision touse Web IDL, which offers bindings for ECMAScript and Java, is based onthe Use Cases and Requirements for Ontology and Metadata API for Media Resources1.0 [MEDIA-ANNOT-REQS].This API defines interfaces that enable users/applications to consumemetadata in an interoperable manner. Interoperability between metadataformats is ensured by the use of the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY]as pivot metadata format. This API offers operations to requestparticular metadata information represented in a certain metadata formatrelated to media resources on the Web. Further it specifies the actualrepresentation of the coreproperties and the behaviour of this API.###############################################################Section: Formats in scope ...########################################################################################################################## -->1.1 Formats in scopeRefers to the formatsin scope of the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY].1.2 Formats out of scopeRefers to the Formatsout of scope of the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY].1.3 TerminologyIn this document the terms "Ontology", "Media Resource", "Property","Mapping" and "Property value types" are to be interpreted as definedin Section 2of the Ontology for Media Resources 1.0 specification [MEDIA-ONTOLOGY].###############################################################Section: CONFORMANCE########################################################################################################################## -->2. ConformanceIn addition to sections marked as non-normative, all authoringguidelines, diagrams, examples, and notes in this specification arenon-normative. Everything else in this specification is normative.The keywords must,class="rfc2119">must not, required,should,class="rfc2119">should not, recommended,may, and optionalin this specification are to be interpreted as described in [rel="biblioentry" class="bibref">RFC2119].###############################################################Section: DESIGN CONSIDERATION########################################################################################################################## -->3. Design considerationThis section discusses different usage scenarios that led to design ofthe API. We consider two main scenarios, where this API be implementedand invoked:in the User agent, oras a client accessing a Web Service.In both client-only and client-server cases of the implementation, themedia resources and/or the metadata sources are in many cases remote.The API is by default specified as an asynchronous API, i.e., the callsare not blocking, but results (or errors) are returned using a callbackmechanism. In order to better support the Web Service case, asynchronous mode is also defined. The synchronous mode is optional.The two scenarios are shown in Figure 1.id="API-options" src="API_options.png" alt="Diagram showing 2 scenarios with different usage of the API." />Figure 1: Twoscenarios with different usage of this API.This specification only defines the Metadata API for MediaResources. Other components depicted in Figure 1 (e.g.,access/extraction/storage of metadata) are not covered.Scenario 1: Client-only (User agent)In the first scenario, this API is implemented in the user agent,i.e. built into a browser, as a plugin or as a JavaScript library.Here, there exist three possibilities to invoke the API: by anexternal calling code, an internal calling code behaving like a clientor it is attached as an extension to a user agent. Usually, suchimplementations are an example for asynchronous processing. Besidesthe Metadata API for Media Resources 1.0, the user agent may include componentsfor metadata access (and extraction) and mappings for a supported setof formats, e.g., as defined in the propertymapping table of the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY].Further, the metadata sources (the media resource and/or metadatadocument(s)) must be retrievable. The access (e.g., establishconnection, retrieval) to the metadata sources is handled by the useragent.Scenario 2: Client-ServerIn the second scenario, this API is implemented as a Web Servicefollowing the principles of server-side synchronous processing. Suchan implementation would be typically used by a non-UI client, such asan agent harvesting metadata. However, this API can be also accessedfrom a user agent, and used the same way as described in scenario 1with the help of a client-side library for accessing the Web Service.In the implementation of the Web Service, this scenario also allowssupporting a media repository, e.g., content provider's archivedatabase, movie store. With the help of such a service the user agentcan retrieve metadata sources, which might have a custom metadataformat not supported by a user agent. In contrast to an integratedcomponent (see scenario 1), an implementation of this API in a webservice can do more complex mappings on the fly than a componentintegrated in a user agent, and can be more flexible (e.g., supportingadditional formats).In both scenarios, the API serves as a mediator between a clientapplication and the actual metadata sources. Interoperability is ensuredby defining i) operations for accessing the metadata information, ii) acommon object structure and iii) API behaviour (e.g., status codes).Following this, an implementation has to implement this stack ofcomponents:An implementation of the Metadata API for Media Resources (as defined inthis document), which provides the actual GETTER methods for theproperties.An implementation of the mappings from a specific source format tothe core properties. Here, the Metadata API for Media Resources 1.0class="rfc2119">should use the Ontology for Media Resources1.0 specification [MEDIA-ONTOLOGY],where applicable.A format specific API to access the metadata. This can be an APIfor retrieving a metadata document describing a media resource (e.g.an XML parser and a set of XPath statements) or an extractor to readmetadata embedded in the media resource (e.g. a library to read EXIFinformation from JPEG images). In order to define the context inwhich this API is applied, at least a unidirectional reference fromthe media resource to the metadata document or vice versa is needed.If this is not the case such a reference needs to be provided by theweb application (scenario 1), web service (scenario 2) or mediarepository (scenario 2).This API provides access to metadata information stored indifferent metadata formats. As such, different instances of the sameproperty can exist.###############################################################Section: API DESCRIPTION########################################################################################################################## -->4. API DescriptionThis API defines a number of interfaces using [rel="biblioentry" class="bibref">WEBIDL]. These can begrouped in the following categories:An interface defining the actual retrieval operations for metadata,called MediaResource, and provided in both synchronousand asynchronous versions (see Section 4.1,Section 4.2 and Section4.3)An interface defining the data structure of responseobjects/metadata annotations, called MediaAnnotationand its specializations (see Section4.4 and Section 4.5)An interface defining a data structure for metadata sources, calledMetadataSource (see Section4.6)Next, the different interfaces and exposed operations are discussed.Implementations of this API mustsupport asynchronous mode of operation, maysupport the synchronous one and mustsupport the interfaces defined in this document. Instead of exceptions,a status code indicating the state of processing (see Section4.7) is returned (in the synchronous API) or provided via acallback function (in the asynchronous API) in case an error occurs.Then, the interfaces for the return types, i.e., MediaAnnotationand its specializations, and MetadataSource are defined.The IDL fragment in Appendix A of thisspecification must be interpreted as required for conforming IDLfragments, as described in the â€œWeb IDLâ€? specification. [rel="biblioentry" class="bibref">WEBIDL]###############################################################Section: MEDIA RESOURCE########################################################################################################################## -->4.1 MediaResource interfaceThe MediaResource interface is the core of this API andprovides operations to access the metadata properties of a specificmedia resource. Here, a clear separation between asynchronous andsynchronous mode of operation has been achieved by defining twoimplementing interfaces (derived from MediaResource), the AsyncMediaResourceand the SyncMediaResource interface. Objects of theseinterfaces will be created by calling createMediaResourceof the MediaResource interface. The actual connection toa specified metadata source will be created with the execution of thegetMediaProperty operation of AsyncMediaResourceor SyncMediaResource interface. The mediaResourceargument identifies the media resource, for which the implementationof this API should try to find relevant metadata sources. Optionally,references to metadata sources can be passed using an array ofobjects, each implementing the MetadataSource interface (see Section4.6).interfaceclass="idlInterfaceID">MediaResource {shortclass="idlMethName">getSupportedModes ();MediaResourceclass="idlMethName">createMediaResource (class="idlParam">DOMString mediaResource,class="idlParam">optional MetadataSource[]class="idlParamName">metadataSources, optionalclass="idlParamType">short mode);};4.1.1 MethodscreateMediaResourceThis operation instantiates an object of either AsyncMediaResourceor SyncMediaResource interface. Further, it allowsto set the specific media resource and metadata sources to whichthis API is applied.ParameterTypeNullableOptionalDescriptionmediaResourceDOMStringâœ˜âœ˜This attribute must set the specificmedia resource that should be processed by the API.metadataSourcesMetadataSource[]âœ˜âœ”This attribute should specify additionalmetadata sources.modeshortâœ˜âœ”This attribute should specify thedesired mode of operation. 1 forasynchronous and 2 for synchronousmode should be used.In the case the mode argument is omitted, and theimplementation supports both modes, the asynchronous modewill be used.No exceptions.Return type: MediaResourcegetSupportedModesThis operation is called to identify the implemented mode. Thereturn codes should be as follows: 1 forasynchronous, 2 for synchronous and 3for both modes.No parameters.No exceptions.Return type: short4.1.2 Examples in JavascriptExample for getSupportedModes:ma =class="sh_keyword">new MediaResourceclass="sh_symbol">();var mode = maclass="sh_symbol">.getSupportedModesclass="sh_symbol">();/** Resulting in:* { "supportedModes" : 3 }*/Example for createMediaResource:metadataSourcesclass="sh_symbol">= new MetadataSourceclass="sh_symbol">[2];metadataSources[0class="sh_symbol">] = newclass="sh_function">MetadataSource("http://www.w3.org/2008/WebVideo/Annotations/drafts/metadata_formats/DC_example1.xml"class="sh_symbol">,"dc");metadataSources[1class="sh_symbol">] = newclass="sh_function">MetadataSource("http://www.w3.org/2008/WebVideo/Annotations/wiki/images/9/93/MAWG-Stockholm-20090626.JPG"class="sh_symbol">,"exif");mediaResource = newclass="sh_function">MediaResource();if (mediaResourceclass="sh_symbol">.getSupportedModesclass="sh_symbol">() == 1class="sh_symbol">|| mediaResource.getSupportedModesclass="sh_symbol">() == 3class="sh_symbol">) {aSyncObject = mediaResource.class="sh_function">createMediaResource("http://www.w3.org/2008/WebVideo/Annotations/wiki/images/9/93/MAWG-Stockholm-20090626.JPG"class="sh_symbol">,metadataSources, 1class="sh_symbol">);} else ifclass="sh_symbol">(mediaResource.getSupportedModesclass="sh_symbol">() == 2class="sh_symbol">|| mediaResource.getSupportedModesclass="sh_symbol">() == 3class="sh_symbol">) {syncObject = mediaResource.class="sh_function">createMediaResource("http://www.w3.org/2008/WebVideo/Annotations/wiki/images/9/93/MAWG-Stockholm-20090626.JPG"class="sh_symbol">,metadataSources, 2class="sh_symbol">);}###############################################################Section: ASYNCHRONOUS API########################################################################################################################## -->4.2 AsyncMediaResourceinterfaceThe AsyncMediaResource interface provides a number ofoperations that allow accessing the metadata of a media resource. Thisinterface must be implemented.Next, we give the Web IDL description of the AsyncMediaResourceinterface and describe the different operations that are part of it.In this section the MediaAnnotationsinterface is used in the interface definitions. It serves as acontainer to hold general values about properties enabling aniteration over a set of different properties. Its definition can befound in Section 4.4interfaceclass="idlInterfaceID">AsyncMediaResource :class="idlType" href="#idl-def-MediaResource">MediaResource {voidhref="#widl-AsyncMediaResource-getMediaProperty-void-DOMStringArray-propertyNames-PropertyCallback-successCallback-ErrorCallback-errorCallback-DOMString-fragment-DOMString-sourceFormat-DOMString-language">getMediaProperty (class="idlParam">DOMString[] propertyNames,class="idlParam">PropertyCallbackclass="idlParamName">successCallback,class="idlParamType">ErrorCallback errorCallback,Â Â Â Â Â Â class="idlParam">optional DOMStringclass="idlParamName">fragment, optionalclass="idlParamType">DOMString sourceFormat,class="idlParam">optional DOMStringclass="idlParamName">language);voidhref="#widl-AsyncMediaResource-getOriginalMetadata-void-DOMString-sourceFormat-MetadataCallback-successCallback-ErrorCallback-errorCallback">getOriginalMetadata (class="idlParam">DOMString sourceFormat,class="idlParam">MetadataCallbackclass="idlParamName">successCallback,class="idlParamType">ErrorCallback errorCallback);};4.2.1 MethodsgetMediaPropertyThis operation allows retrieval of the value of a specificproperty, several or all properties in an asynchronous manner. Thespecific property is passed as an argument and a list of objectsis returned that hold the values according to the requestedproperty. These objects implement the MediaAnnotationinterface, described in Section 4.4.Depending on the requested property, the returned objectsimplement a different subtypes (inheriting from the MediaAnnotationinterface). For example, requesting "title" gives back an array ofobjects implementing the Title interface, requesting"creator" results in objects implementing the Creatorinterface and so on. These interfaces are described in Section4.5. An example can be found here.ParameterTypeNullableOptionalDescriptionpropertyNamesDOMString[]âœ˜âœ˜This argument identifies an arraycontaining the properties for which the values need to beretrieved. For an empty array all properties carryingvalues will be retrieved.successCallbackPropertyCallbackâœ˜âœ˜This argument holds a callback objectfor asynchronous requests to the property. The successCallbackobject implements the PropertyCallbackinterface and holds a handleEvent operationthat needs to be called once all data for the requestedproperty is gathered. This handleEventoperation needs to be called with a new MediaAnnotationarray.errorCallbackErrorCallbackâœ˜âœ˜This argument holds a callback objectfor failure of asynchronous requests to the property. TheerrorCallback object implements the ErrorCallbackinterface and holds a handleEvent operationthat needs to be called if an attempt fails. This handleEventoperation needs to be called with a new DOMStringrepresenting the status code of the error (see Section4.7 for details).fragmentDOMStringâœ˜âœ”This argument contains a URI identifyingthe specific media fragment for which the metadata isrequested. The URI mustconform to the URI for Media Fragment [rel="biblioentry" class="bibref">MEDIA-FRAGMENTS]specification. This parameter is optional.sourceFormatDOMStringâœ˜âœ”This argument identifies a specificmetadata format. It shoulduse the metadataformat identifiers defined in the Ontology forMedia Resources 1.0 specification [MEDIA-ONTOLOGY].If a metadata format is defined, only the metadataavailable in the specified metadata format are retrieved.This parameter is optional.languageDOMStringâœ˜âœ”This argument allows to identify thelanguage of the metadata. Values for the metadata willonly be returned if it is available in the specifiedlanguage. Recommended best practice is to use BCP 47 [href="#bib-BCP47" rel="biblioentry" class="bibref">BCP47].This parameter is optional.No exceptions.Return type: voidgetOriginalMetadataThis operation allows retrieval of the original metadataaccording to the specified source format in an asynchronousmanner. An example can be found here.ParameterTypeNullableOptionalDescriptionsourceFormatDOMStringâœ˜âœ˜This argument identifies a specificmetadata format. It shoulduse the metadataformat identifiers defined in the Ontology forMedia Resources 1.0 specification [MEDIA-ONTOLOGY].If a metadata format is defined, only the metadataavailable in the specified metadata format are retrieved.successCallbackMetadataCallbackâœ˜âœ˜This argument holds a callback objectfor asynchronous requests for the original metadata. The successCallbackobject implements the MetadataCallbackinterface and holds a handleEvent operationthat needs to be called once all properties having valuesare listed. This handleEvent operation needsto be called with a new DOMString array holding theoriginal metadata.errorCallbackErrorCallbackâœ˜âœ˜This argument holds a callback objectfor failure of asynchronous requests for the originalmetadata. The errorCallback objectimplements the ErrorCallback interface andholds a handleEvent operation that needs tobe called if an attempt fails. This handleEventoperation needs to be called with a new DOMStringrepresenting the status code of the error (see Section4.7 for details).No exceptions.Return type: void4.2.2 Callback interfaces4.2.2.1 PropertyCallbackinterfaceThe PropertyCallback interface holds a handleEventoperation that needs to be called once all data for the requestedproperty has been gathered.interfaceclass="idlInterfaceID">PropertyCallback {voidhref="#widl-PropertyCallback-handleEvent-void-MediaAnnotationArray-mediaAnnotations">handleEvent (class="idlParam">MediaAnnotation[]class="idlParamName">mediaAnnotations);};4.2.2.1.1 MethodshandleEventThis operation is called when all data is gatheredcorresponding to a request for values of one or moreproperties.ParameterTypeNullableOptionalDescriptionmediaAnnotationsMediaAnnotation[]âœ˜âœ˜This argument holds a list ofobjects with values according to the requestedproperty. These objects implement the MediaAnnotationinterface, described in Section4.4. Depending on the requested property, thereturned objects implement a different subtypes(inheriting from the MediaAnnotationinterface).No exceptions.Return type: void4.2.2.2 MetadataCallbackinterfaceThe MetadataCallback interface holds a handleEventoperation that needs to be called once the requested metadata hasbeen gathered.interfaceclass="idlInterfaceID">MetadataCallback {voidhref="#widl-MetadataCallback-handleEvent-void-DOMStringArray-metadata">handleEvent (class="idlParam">DOMString[] metadata);};4.2.2.2.1 MethodshandleEventThis operation is called when all data is gatheredcorresponding to a request for the original metadata.ParameterTypeNullableOptionalDescriptionmetadataDOMString[]âœ˜âœ˜This argument holds a list ofDOMStrings representing the original metadata. Notethat, multiple metadata instances can exist (e.g., oneDublin Core and one MPEG-7 document).No exceptions.Return type: void4.2.3 Examples in JavascriptExample for asynchronous getMediaProperty:aSyncMediaResourceclass="sh_symbol">= mediaResource.createMediaResourceclass="sh_symbol">("http://www.imdb.com/title/tt0133152/"class="sh_symbol">, new Arrayclass="sh_symbol">(), 1);aSyncMediaResource.getMediaPropertyclass="sh_symbol">(["title"], successCallbackclass="sh_symbol">, errorCallback, ""class="sh_symbol">, "",class="sh_string">"");function successCallbackclass="sh_symbol">(MediaAnnotation[] mediaAnnotationsclass="sh_symbol">) {...}/** Resulting in:* [ { "Title" : {* "propertyName" : "title",* "value" : "Planet of the apes",* "language" : en-us",* ...* "statusCode" : 200* }* },* { "Title" : {* "propertyName" : "title",* "value" : "Monkey Planet",* "language" : en-us",* ...,* "statusCode" : 200* }* },* { ...* } ]*/function errorCallbackclass="sh_symbol">(DOMString error)class="sh_cbracket">{...}/** Resulting in:* { error: { "statusCode" : 200 } }*/Example for asynchronous getOriginalMetadata:aSyncMediaResourceclass="sh_symbol">= mediaResource.createMediaResourceclass="sh_symbol">("http://www.w3.org/2008/WebVideo/Annotations/wiki/images/9/93/MAWG-Stockholm-20090626.JPG"class="sh_symbol">,new Arrayclass="sh_symbol">(), 1);aSyncMediaResource.getOriginalMetadataclass="sh_symbol">("dc", successCallbackclass="sh_symbol">, errorCallback);function successCallbackclass="sh_symbol">(DOMString[] metadataclass="sh_symbol">) {...}/** Resulting in:* [ { "statusCode" : 200* },* {"originalMetadata" : "<metadataclass="sh_type">xmlns='http://example.org/myapp/'*class="sh_type">xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'*class="sh_type">xsi:schemaLocation='http://example.org/myapp/class="sh_normal"> http://example.org/myapp/schema.xsd'*class="sh_type">xmlns:dc='http://purl.org/dc/elements/1.1/'class="sh_keyword">>*class="sh_keyword"><dc:title>DC titleclass="sh_keyword"></dc:title>* </metadata>class="sh_comment">"* } ]*/function errorCallbackclass="sh_symbol">(DOMString error)class="sh_cbracket">{...}/** Resulting in:* { error: { "statusCode" : 200 } }*/###############################################################Section: SYNCHRONOUS API########################################################################################################################## -->4.3 SyncMediaResourceinterfaceThe SyncMediaResource interface provides a number ofoperations to access the metadata of a media resource. This interfacemay be implemented.Next, we give the Web IDL description of the SyncMediaResourceinterface for synchronous requests and describe the differentoperations that are part of it. The MediaResourcedefines a constructor that can be called to construct the object basedon an identifier of the media resource and optionally some metadatasources.interfaceclass="idlInterfaceID">SyncMediaResource :class="idlType" href="#idl-def-MediaResource">MediaResource {MediaAnnotation[]class="idlMethName">getMediaProperty (class="idlParam">DOMString[] propertyNames,class="idlParam">optional DOMStringclass="idlParamName">fragment,Â Â Â Â Â Â  optionalclass="idlParamType">DOMString sourceFormat,class="idlParam">optional DOMStringclass="idlParamName">language);DOMString[]class="idlMethName">getOriginalMetadata (class="idlParam">DOMString sourceFormat);};4.3.1 MethodsgetMediaPropertyThis operation allows retrieval of the metadata of a specificproperty, several or all properties in a synchronous manner. Thepassed array holds the requested properties and an array of objectsis returned. If the array is empty, every property holding valueswill be requested and returned. The returned objects implement theMediaAnnotation interface (see Section4.3). Depending on the requested property, the returnedobjects implement different subtypes (inheriting from the MediaAnnotationinterface). For example, requesting "title" gives back an arrayof objects implementing the Title interface,requesting "creator" results in objects implementing the Creatorinterface and so on. These subtypes are described in Section4.4. The operation returns a MediaAnnotationarray holding the requested properties. If an error occurs duringretrieval, a MediaAnnotation object with thecorresponding status code (e.g., 400, 404 or 415) will begenerated and inserted at the first position of the array. Anexample can be found here.In this section the MediaAnnotationsinterface is used in the interface definitions. It serves as acontainer to hold general values about properties enabling aniteration over a set of different properties. Its explanationcan be found in Section 4.4ParameterTypeNullableOptionalDescriptionpropertyNamesDOMString[]âœ˜âœ˜This argument holds the requestedproperties as an array. If the array is empty, eachproperty holding values will be returned.fragmentDOMStringâœ˜âœ”This argument contains a URI identifyingthe specific media fragment for which the metadata isrequested. The URI mustconform to the URI for Media Fragment [rel="biblioentry" class="bibref">MEDIA-FRAGMENTS]specification. This parameter is optional.sourceFormatDOMStringâœ˜âœ”This argument identifies a specificmetadata format. It shoulduse the metadataformat identifiers defined in the Ontology for MediaResources 1.0 specification [MEDIA-ONTOLOGY].If a metadata format is defined, only the metadataavailable in the specified metadata format is retrieved.This parameter is optional.languageDOMStringâœ˜âœ”This argument allows to identify thelanguage of the metadata. Values for the metadata willonly be returned if it is available in the specifiedlanguage. Recommended best practice is to use BCP 47 [href="#bib-BCP47" rel="biblioentry" class="bibref">BCP47].This parameter is optional.No exceptions.Return type: MediaAnnotation[]getOriginalMetadataThis operation allows retrieval of the original metadataaccording to the specified source format in a synchronous manner.The operation returns a DOMString array holding thestatus code of the request at the first and the original metadataat the second position. An example can be found here.ParameterTypeNullableOptionalDescriptionsourceFormatDOMStringâœ˜âœ˜This argument identifies a specificmetadata format. It shoulduse the metadataformat identifiers defined in the Ontology forMedia Resources 1.0 specification [MEDIA-ONTOLOGY].If a metadata format is defined, only the metadataavailable in the specified metadata format is retrieved.No exceptions.Return type: DOMString[]4.3.2 Examples in JavascriptThe examples in this section use getMediaProperty()to get an object implementing the MediaAnnotationinterface. The noErrorStatus function ensures that noerror is present and the requested properties carry values.We give some JavaScript examples on how to use the synchronous MediaResourceinterface and it's operations.Example for synchronous getMediaProperty:syncMediaResourceclass="sh_symbol">= mediaResource.createMediaResourceclass="sh_symbol">("http://www.imdb.com/title/tt0133152/"class="sh_symbol">,new Arrayclass="sh_symbol">(), 2);title = syncMediaResource.class="sh_function">getMediaProperty([class="sh_string">"title"], ""class="sh_symbol">, "",class="sh_string">"");if (noErrorStatusclass="sh_symbol">(title[0class="sh_symbol">].statusCode) ==class="sh_keyword">true) {...}/** Resulting in:* [ { "Title" : {* "propertyName" : "title",* "value" : "Planet of the apes",* "language" : en-us",* ...,* "statusCode" : 200* }* },* { "Title" : {* "propertyName" : "title",* "value" : "Planet der Affen",* "language" : "de-de",* ...,* "statusCode" : 200* }* },* { ...* } ]*/Example for synchronous getOriginalMetadata:syncMediaResourceclass="sh_symbol">= mediaResource.createMediaResourceclass="sh_symbol">("http://www.w3.org/2008/WebVideo/Annotations/wiki/images/9/93/MAWG-Stockholm-20090626.JPG"class="sh_symbol">,new Arrayclass="sh_symbol">(), 2);dcMetadata = syncMediaResource.class="sh_function">getOriginalMetadata(class="sh_string">"DC");if (noErrorStatusclass="sh_symbol">(dcMetadata[0class="sh_symbol">].statusCode) ==class="sh_keyword">true) {...}/** Resulting in:* [ { "statusCode" : 200* },* {"originalMetadata" : "<metadataclass="sh_type">xmlns='http://example.org/myapp/'*class="sh_type">xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'*class="sh_type">xsi:schemaLocation='http://example.org/myapp/class="sh_normal"> http://example.org/myapp/schema.xsd'*class="sh_type">xmlns:dc='http://purl.org/dc/elements/1.1/'class="sh_keyword">>*class="sh_keyword"><dc:title>DC titleclass="sh_keyword"></dc:title>* </metadata>class="sh_comment">"* } ]*/###############################################################Section: MediaAnnotation inferface########################################################################################################################## -->4.4 MediaAnnotationinterfaceMediaAnnotation interface is used as the return type ofMediaResource.getMediaProperty operation. It is acontainer for holding general values about metadata properties.As several metadata properties are defined as complex types, specificderived types of MediaAnnotation have been defined,adding their specific attributes. However, MediaAnnotationcan be used as a generic return type to access a printable stringrepresentation of the property (in the value attribute).It also includes a status code. In case of general errors, the firstelement of the returned MediaAnnotation array containsthe global error code, otherwise the status can be given for each ofthe returned properties.The following design considerations have been used for specifying thederived interfaces for each of the metadata properties:For each metadata property, an interface is derived from MediaAnnotation,adding typed attributes according to the specification in theontology document.This API must fill valuewith a printable string representation, it is recommended to followthese steps:use a name/label if presentfor a URIif a URI identifies a value known by this API, use theappropriate labeldereference a URI to obtain a label, if possiblereturn the URIcreate a string from the values of the set of attributes (e.g.numeric values)This approach possibly duplicates a string that is found inanother attribute in the value attribute. This isconsidered as an acceptable amount of redundancy for the benefit ofhaving a generic value field for all metadata properties that can beused regardless of the specific metadata property and data type ofthe attributes.If an attribute has type URI|string, the interfaceshall have two attributes, one with "Link" and one with "Label"appended to the attribute name, representing the URI and stringrespectivelyFor consistency, this approach is also followed if the attributehas only either URI or string as type.This approach allows for user extensions by deriving from MediaAnnotationor one of the derived interfaces for one of the metadata properties.interfaceclass="idlInterfaceID">MediaAnnotation {attribute DOMStringclass="idlAttrName">propertyName;attribute DOMStringclass="idlAttrName">value;attribute DOMStringclass="idlAttrName">language;attribute DOMStringclass="idlAttrName">sourceFormat;attribute DOMStringclass="idlAttrName">fragmentIdentifier;attribute DOMStringclass="idlAttrName">mappingType;attribute shortclass="idlAttrName">statusCode;};4.4.1 AttributesfragmentIdentifierof type DOMStringThis attribute shouldbe an URI determining the fragment for which the metadata isrelevant.No exceptions.language of typeDOMStringThis attribute shouldhold the language of the metadata. The attribute is empty iflanguage is not applicable for a specific property. Recommendedbest practice is to use BCP 47 [class="bibref">BCP47].No exceptions.mappingTypeof type DOMStringThis attribute specifies the kind of mapping as discussed inhref="http://www.w3.org/TR/mediaont-10/#semantic-level-mappings">thesemantic level mappings. The value of this attributeclass="rfc2119">should be one of the mappingcharacteristics.No exceptions.propertyNameof type DOMStringThe name of the property mustbe specified and shouldcorrespond to the property names defined in the Ontology for MediaResources 1.0 specification[MEDIA-ONTOLOGY].sourceFormatof type DOMStringThis attribute allows to specify the metadata source from whichthe metadata was retrieved. It shoulduse the metadataformat identifiers defined in the Ontology for MediaResources 1.0 specification [MEDIA-ONTOLOGY].No exceptions.statusCode oftype shortThis attribute mustspecify the status code for theassociated property (e.g., 264 indicating a structured returnvalue).No exceptions.value of typeclass="idlAttrType">DOMStringThis attribute must befilled with an printable string representation.No exceptions.4.4.2 Example in JavaScriptThe noErrorStatus function ensures thatno error is present and the requested properties carry values. The MediaAnnotationinterface will be never instantiated - only instances of the derivedinterfaces will be created. These mustbe filled at least with the parameters specified in the MediaAnnotationinterface and may be filledwith the specific attributes.mediaAnnotationclass="sh_symbol">= image.getMediaPropertyclass="sh_symbol">(["title"],class="sh_string">"", ""class="sh_symbol">, "");if (noErrorStatusclass="sh_symbol">(mediaAnnotation[0class="sh_symbol">].statusCode) ==class="sh_keyword">true) {...}/** Resulting in:* [ { "Title" : {* "propertyName" : "title",* "value" : "Gone with the Wind",* "language" : "en-us",* "sourceFormat" : "mpeg7",* "fragmentIdentifier" : "http://www.example.com/video.ogv#t=10,20class="sh_comment">",* "mappingType" : "Exact match",* "statusCode" : 200* }* } ]###############################################################Section: Properties########################################################################################################################## -->4.5 PropertiesThis section describes the different properties that can be requestedthrough the MediaResource.getMediaProperty() operation.When invoking this operation, objects implementing the MediaAnnotationinterface are returned that represent the specified property. Allproperties are represented with an interface inherited from the MediaAnnotationinterface (following the design guidelines described above).Several of the following return type interfaces can hold the value ofthe property as both URI (i.e., a pointer to a controlled vocabulary)or as free text. The URI is preferred, and the respective attribute ofthe MediaAnnotation interface (or specialized type) shall be filledwhenever possible (i.e., when the information is included in or can beconstructed from the source metadata).In the following, for each property, a (synchronous)JavaScript example illustrates the usage of the property specificattributes. In any case, the general attributes of the MediaAnnotationinterface could be also requested.###############################################################Section: Identification Properties########################################################################################################################## -->4.5.1 Identification Properties4.5.1.1 IdentifierWhen the MediaResource.getMediaProperty operationis invoked with "identifier" as a value of the propertyNamesparameter, an object implementing the Identifierinterface is returned representing the identifier property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY].interfaceclass="idlInterfaceID">Identifier :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">identifierLink;};4.5.1.1.1 AttributesidentifierLinkof type DOMStringThis attribute holds a URI identifying the media resource.No exceptions.4.5.1.1.2 Example in JavaScriptid = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["identifier"]);/** Resulting in:* [ { "Identifier" : {* "propertyName" : "identifier",* "identifierLink" : "urn:uuid:36a87260-1102-11df-8a39-0800200c9a66",* "statusCode" : 200* }* } ]*/4.5.1.2 TitleWhen the MediaResource.getMediaProperty operationis invoked with "title" as a value of the propertyNamesparameter, an object implementing the Titleinterface is returned representing the title property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY].interfaceclass="idlInterfaceID">Title :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">titleLabel;attribute DOMStringclass="idlAttrName">typeLink;attribute DOMStringclass="idlAttrName">typeLabel;};4.5.1.2.1 AttributestitleLabel of typeclass="idlAttrType">DOMStringThis attribute holds the title as a plain string.No exceptions.typeLabel of typeclass="idlAttrType">DOMStringThis attribute holds the type of the title as a plainstring.No exceptions.typeLink of typeclass="idlAttrType">DOMStringThis attribute holds the type of the title as a URI.No exceptions.4.5.1.2.2 Example in JavaScripttitle = songclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["title"]);/** Resulting in:* [ { "Title" : {* "propertyName" : "title",* "titleLabel" : "Artificial Horizon" ,* "typeLink" : "http://www.ebu.ch/metadata/cs/ebu_ObjectTypeCodeCS.xml#21class="sh_comment">",* "typeLabel" : "Album title",* "statusCode" : 200* }* } ]*/4.5.1.3 LanguageWhen the MediaResource.getMediaProperty operationis invoked with "language" as a value of the propertyNamesparameter, an object implementing the Languageinterface is returned representing the language property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY].interfaceclass="idlInterfaceID">Language :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">languageLink;attribute DOMStringclass="idlAttrName">languageLabel;};4.5.1.3.1 AttributeslanguageLabelof type DOMStringThis attribute represents the language of the media resourceas a plain string, which can be filtered on in the getMediaPropertyoperation. Recommended best practice is to use BCP 47 [href="#bib-BCP47" rel="biblioentry" class="bibref">BCP47].No exceptions.languageLink oftype DOMStringThis attribute represents the language of the media resourceas a URI.No exceptions.4.5.1.3.2 Example in JavaScriptlanguage = videoclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["language"]);/** Resulting in:* [ { "Language" : {* "propertyName" : "language",* "languageLabel" : "en-us",* "statusCode" : 200* }* } ]*/4.5.1.4 LocatorWhen the MediaResource.getMediaProperty operationis invoked with "locator" as a value of the propertyNamesparameter, an object implementing the Locatorinterface is returned representing the locator property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY].interfaceclass="idlInterfaceID">Locator :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">locatorLink;};4.5.1.4.1 AttributeslocatorLink oftype DOMStringThis attribute specifies the location of the media resourceby a URI.No exceptions.4.5.1.4.2 Example in JavaScriptlocator = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["locator"]);/** Resulting in:* [ { "Locator" : {* "propertyName" : "locator",* "locatorLink" : "http://www.w3.org/2008/WebVideo/Annotations/wiki/images/9/93/MAWG-Stockholm-20090626.JPGclass="sh_comment">",* "statusCode" : 200* }* } ]*/###############################################################Section: Creation Properties########################################################################################################################## -->4.5.2 Creation Properties4.5.2.1 ContributorWhen the MediaResource.getMediaProperty operationis invoked with "contributor" as a value of the propertyNamesparameter, an object implementing the Contributorinterface is returned representing the contributorproperty (defined in the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY].interfaceclass="idlInterfaceID">Contributor :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">contributorLink;attribute DOMStringclass="idlAttrName">contributorLabel;attribute DOMStringclass="idlAttrName">roleLink;attribute DOMStringclass="idlAttrName">roleLabel;};4.5.2.1.1 AttributescontributorLabelof type DOMStringThis attribute represents the contributor (i.e., the agentmaking the contribution) as a plain stringNo exceptions.contributorLinkof type DOMStringThis attribute represents the contributor (i.e., the agentmaking the contribution) as a URI.No exceptions.roleLabel oftype DOMStringThis attribute represents the role of the contributor as aplain string.No exceptions.roleLink of typeDOMStringThis attribute represents the role of the contributor asURI.No exceptions.4.5.2.1.2 Example in JavaScriptcontributorclass="sh_symbol">= video.getMediaPropertyclass="sh_symbol">(["contributor"]);/** Resulting in:* [ { "Contributor" : {* "propertyName" : "contributor",* "contributorLink" : "http://en.wikipedia.org/wiki/Tim_Burtonclass="sh_comment">",* "contributorLabel" : "Tim Burton",* "roleLink" : "http://www.imdb.com/name/nm0000318/class="sh_comment">",* "roleLabel" : "director",* "statusCode" : 200* }* } ]*/4.5.2.2 CreatorWhen the MediaResource.getMediaProperty operationis invoked with "creator" as a value of the propertyNamesparameter, an object implementing the Creatorinterface is returned representing the creator property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY].interfaceclass="idlInterfaceID">Creator :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">creatorLink;attribute DOMStringclass="idlAttrName">creatorLabel;attribute DOMStringclass="idlAttrName">roleLink;attribute DOMStringclass="idlAttrName">roleLabel;};4.5.2.2.1 AttributescreatorLabel oftype DOMStringThis attribute represents the creator (i.e., the agentparticipating in the creation of the media resource) as aplain string.No exceptions.creatorLink oftype DOMStringThis attribute represents the creator (i.e., the agentparticipating in the creation of the media resource) as a URI.No exceptions.roleLabel of typeclass="idlAttrType">DOMStringThis attribute represents the role of the creator as a plainstring.No exceptions.roleLink of typeclass="idlAttrType">DOMStringThis attribute represents the role of the creator as URI.No exceptions.4.5.2.2.2 Example in JavaScriptcreator = videoclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["creator"]);/** Resulting in:* [ { "Creator" : {* "propertyName" : "creator",* "creatorLink" : "http://dbpedia.org/resource/William_Shakespeareclass="sh_comment">",* "creatorLabel" : "William Shakespeare",* "roleLink" : "http://www.ebu.ch/metadata/cs/ebu_RoleCodeCS.xml#22.5class="sh_comment">",* "roleLabel" : "playwright",* "statusCode" : 200* }* } ]*/4.5.2.3 MADateWhen the MediaResource.getMediaProperty operationis invoked with "date" as a value of the propertyNamesparameter, an object implementing the Date interfaceis returned representing the date property (defined in theOntology for Media Resources 1.0 specification [MEDIA-ONTOLOGY]).Thisproperty has been renamed from "Date" into "MADate" in order toavoid naming conflicts with other objects named "Date" in webapplications.interfaceclass="idlInterfaceID">MADate :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">date;attribute DOMStringclass="idlAttrName">typeLink;attribute DOMStringclass="idlAttrName">typeLabel;};4.5.2.3.1 Attributesdate of type DOMStringThis attribute represents a date related to the mediaresource. A date value mustbe represented using one of the specific date/time data typesof XML Schema, depending on the available precision: gYeargYearMonth, date, dateTime, or dateTimeStamp.No exceptions.typeLabel of typeclass="idlAttrType">DOMStringThis attribute defines the category of date (e.g. creationdate, broadcast date, release date, date recorded and dateedited) as a plain string.No exceptions.typeLink of typeclass="idlAttrType">DOMStringThis attribute defines the category of date (e.g. creationdate, broadcast date, release date, date recorded and dateedited) as a URI.No exceptions.4.5.2.3.2 Example in JavaScriptmaDate = videoclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["date"]);/** Resulting in:* [ { "MADate" : {* "propertyName" : "date",* "date": "2009-06-26T15:30:00",* "typeLink" : "urn:smpte:ul:06.0E.2B.34.01.01.01.02.07.02.01.10.02.03.00.00",* "typeLabel" : "modification date",* "statusCode" : 200* }* } ]*/4.5.2.4 LocationWhen the MediaResource.getMediaProperty operationis invoked with "location" as a value of the propertyNamesparameter, an object implementing the Locationinterface is returned representing the location property(defined inthe Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Location :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">locationLink;attribute DOMStringclass="idlAttrName">locationLabel;attribute doubleclass="idlAttrName">longitude;attribute doubleclass="idlAttrName">latitude;attribute doubleclass="idlAttrName">altitude;attribute DOMStringclass="idlAttrName">coordinateSystemLabel;attribute DOMStringclass="idlAttrName">coordinateSystemLink;};4.5.2.4.1 Attributesaltitude of typeclass="idlAttrType">doubleThis attribute holds the altitude of the location, w.r.t.the coordinate system specified by the coordiateSystemattribute.No exceptions.coordinateSystemLabelof type DOMStringThis attribute identifies the coordinate system used by itsname.No exceptions.coordinateSystemLinkof type DOMStringThis attribute identifies the coordinate system used by aURI.No exceptions.latitude of typeclass="idlAttrType">doubleThis attribute holds the latitude of the location, w.r.t.the coordinate system specified by the coordiateSystemattribute.No exceptions.locationLabelof type DOMStringThis attribute identifies the location by its name as aplain string.No exceptions.locationLink oftype DOMStringThis attribute identifies the location as a URI.No exceptions.longitude of typedoubleThis attribute holds the longitude of the location, w.r.t.the coordinate system specified by the coordiateSystemattribute.No exceptions.4.5.2.4.2 Example in JavaScriptlocation = videoclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["location"]);/** Resulting in:* [ { "Location" : {* "propertyName" : "location",* "locationLink" : "http://en.wikipedia.org/wiki/San_Jose,_Californiaclass="sh_comment">",* "locationLabel" : "San Jose",* "longitude" : 37.33986481118008,* "latitude" : -121.88507080078125,* "altitude" : 0,* "coordinateSystemLabel" : "WGS84",* "coordinateSystemLink" : "http://www.w3.org/2003/01/geo/wgs84_pos#Pointclass="sh_comment">",* "statusCode" : 200* }* } ]*/###############################################################Section: Content Properties########################################################################################################################## -->4.5.3 Content Properties4.5.3.1 DescriptionWhen the MediaResource.getMediaProperty operationis invoked with "description" as a value of the propertyNamesparameter, an object implementing the Descriptioninterface is returned representing the descriptionproperty (defined in the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Description :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">descriptionLabel;};4.5.3.1.1 AttributesdescriptionLabelof type DOMStringThis attribute contains a description of the content of themedia resource.No exceptions.4.5.3.1.2 Example in Javascriptdescriptionclass="sh_symbol">= image.getMediaPropertyclass="sh_symbol">(["description"]);/** Resulting in:* [ { "Description" : {* "propertyName" : "description",* "descriptionLabel" : "Group picture of the W3C MAWG at the F2F meeting in Stockholm.",* "statusCode" : 200* }* } ]*/4.5.3.2 KeywordWhen the MediaResource.getMediaProperty operationis invoked with "keyword" as a value of the propertyNamesparameter, an object implementing the Keywordinterface is returned representing the keyword property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Keyword :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">keywordLabel;attribute DOMStringclass="idlAttrName">keywordLink;};4.5.3.2.1 AttributeskeywordLabel oftype DOMStringThis attribute contains a keyword describing the content asa plain string.No exceptions.keywordLink oftype DOMStringThis attribute contains a URI representing a keyworddescribing the content.No exceptions.4.5.3.2.2 Example in Javascriptkeyword = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["keyword"]);/** Resulting in:* [ { "Keyword" : {* "propertyName" : "keyword",* "keywordLabel" : "meeting with people from outside the organisation",* "keywordLink" : "http://sw.opencyc.org/2008/06/10/concept/en/MeetingWithOrganizationalOutsidersclass="sh_comment">",* "statusCode" : 200* }* },* { "Keyword" : {* "propertyName" : "keyword",* "keywordLabel" : "standardisation",* "keywordLink" : "http://purl.org/vocabularies/princeton/wn30/synset-standardization-noun-1class="sh_comment">",* "statusCode" : 200* }* } ]*/4.5.3.3 GenreWhen the MediaResource.getMediaProperty operationis invoked with "genre" as a value of the propertyNamesparameter, an object implementing the Genreinterface is returned representing the genre property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Genre :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">genreLabel;attribute DOMStringclass="idlAttrName">genreLink;};4.5.3.3.1 AttributesgenreLabel of typeclass="idlAttrType">DOMStringThis attribute represents the genre of the media resource asa plain string.No exceptions.genreLink of typeclass="idlAttrType">DOMStringThis attribute represents the genre of the media resource asa URI.No exceptions.4.5.3.3.2 Example in Javascriptgenre = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["genre"]);/** Resulting in:* [ { "Genre" : {* "propertyName" : "genre",* "genreLabel" : "Sports",* "genreLink" : "http://www.ebu.ch/metadata/cs/ebu_ContentGenreCS.xml#3.1.1.9class="sh_comment">"* "statusCode" : 200* }* } ]*/4.5.3.4 RatingWhen the MediaResource.getMediaProperty operationis invoked with "rating" as a value of the propertyNamesparameter, an object implementing the Ratinginterface is returned representing the rating property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Rating :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute doubleclass="idlAttrName">ratingValue;attribute DOMStringclass="idlAttrName">ratingSystemLabel;attribute DOMStringclass="idlAttrName">ratingSystemLink;attribute doubleclass="idlAttrName">minimum;attribute doubleclass="idlAttrName">maximum;};4.5.3.4.1 Attributesmaximum of typeclass="idlAttrType">doubleThis attribute specifies the maximum rating value in therating system.No exceptions.minimum of typeclass="idlAttrType">doubleThis attribute specifies the minimum rating value in therating system.No exceptions.ratingSystemLabelof type DOMStringThis attribute identifies the rating system by a plainstring.No exceptions.ratingSystemLinkof type DOMStringThis attribute identifies the rating system as a URI.No exceptions.ratingValue oftype doubleThis attribute contains the value of the rating.No exceptions.4.5.3.4.2 Example in Javascriptrating = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["rating"]);/** Resulting in:* [ { "Rating" : {* "propertyName" : "rating",* "ratingValue" : 10.0,* "ratingSystemLabel" : "John Doe",* "ratingSystemLink" : "http://individuals.example.com/JohnDoeclass="sh_comment">",* "minimum" : 0,* "maximum" : 10.0,* "statusCode" : 200* }* } ]*/###############################################################Section: Relational Properties########################################################################################################################## -->4.5.4 Relational Properties4.5.4.1 RelationWhen the MediaResource.getMediaProperty operationis invoked with "relation" as a value of the propertyNamesparameter, an object implementing the Relationinterface is returned representing the relation property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Relation :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">targetLink;attribute DOMStringclass="idlAttrName">targetLabel;attribute DOMStringclass="idlAttrName">typeLink;attribute DOMStringclass="idlAttrName">typeLabel;};4.5.4.1.1 AttributestargetLabel oftype DOMStringThis attribute identifies the related resource by a plainstring.No exceptions.targetLink oftype DOMStringThis attribute identifies the related resource by a URI.No exceptions.typeLabel of typeDOMStringThis attribute specifies the type of relationship by a plainstring.No exceptions.typeLink of typeclass="idlAttrType">DOMStringThis attribute specifies the type of relationship by a URI.No exceptions.4.5.4.1.2 Example in Javascriptrelation = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["relation"]);/** Resulting in:* [ { "Relation" : {* "propertyName" : "relation",* "targetLink" : "http://www.w3.org/2008/WebVideo/Annotations/wiki/Image:MAWG-Stockholm-20090626_thumb.JPGclass="sh_comment">",* "targetLabel" : "Group picture of MAWG in Stockholm",* "typeLink" : "http://www.ebu.ch/metadata/cs/ebu_HowRelatedCS.xml#19class="sh_comment">",* "typeLabel" : "thumbnail",* "statusCode" : 200* }* } ]*/4.5.4.2 CollectionWhen the MediaResource.getMediaProperty operationis invoked with "collection" as a value of the propertyNamesparameter, an object implementing the Collectioninterface is returned representing the collection property(defined inthe Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Collection :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">collectionLink;attribute DOMStringclass="idlAttrName">collectionLabel;};4.5.4.2.1 AttributescollectionLabelof type DOMStringThis attribute holds the name of the collection from whichthe media resource originates as a plain string.No exceptions.collectionLinkof type DOMStringThis attribute holds the name of the collection from whichthe media resource originates as URI.No exceptions.4.5.4.2.2 Example in Javascriptcollectionclass="sh_symbol">= image.getMediaPropertyclass="sh_symbol">(["collection"]);/** Resulting in:* [ { "Collection" : {* "propertyName" : "collection",* "collectionLink" : "http://individuals.example.com/JohnDoe/myWorkPictures/class="sh_comment">",* "collectionLabel" : "My Work Pictures",* "statusCode" : 200* }* } ]*/###############################################################Section: Rights Properties########################################################################################################################## -->4.5.5 Rights Properties4.5.5.1 CopyrightWhen the MediaResource.getMediaProperty operationis invoked with "copyright" as a value of the propertyNamesparameter, an object implementing the Copyrightinterface is returned representing the copyright property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Copyright :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">copyrightLabel;attribute DOMStringclass="idlAttrName">holderLabel;attribute DOMStringclass="idlAttrName">holderLink;};4.5.5.1.1 AttributescopyrightLabelof type DOMStringThis attribute contains the copyright statement as a plainstring.No exceptions.holderLabel oftype DOMStringThis attribute identifies the copyright holder by a plainstring.No exceptions.holderLink oftype DOMStringThis attribute identified the copyright holder by a URI.No exceptions.4.5.5.1.2 Example in Javascriptcopyright = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["copyright"]);/** Resulting in:* [ { "Copyright" : {* "propertyName" : "copyright",* "copyrightLabel" : "All images in the collection are copyrighted by John Doe.",* "holderLabel" : "John Doe",* "holderLink" : "http://individuals.example.com/JohnDoeclass="sh_comment">",* "statusCode" : 200* }* } ]*/4.5.5.2 PolicyWhen the MediaResource.getMediaProperty operationis invoked with "policy" as a value of the propertyNamesparameter, an object implementing the Policyinterface is returned representing the policy property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Policy :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">statementLink;attribute DOMStringclass="idlAttrName">statementLabel;attribute DOMStringclass="idlAttrName">typeLink;attribute DOMStringclass="idlAttrName">typeLabel;};4.5.5.2.1 AttributesstatementLabelof type DOMStringThis attribute contains a plain string of the policystatement.No exceptions.statementLink oftype DOMStringThis attribute contains a URI of the policy statement.No exceptions.typeLabel of typeclass="idlAttrType">DOMStringThis attribute identifies the type of the policy as a URI asa plain string.No exceptions.typeLink of typeclass="idlAttrType">DOMStringThis attribute identifies the type of the policy as a URI.No exceptions.4.5.5.2.2 Example in Javascriptpolicy = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["policy"]);/** Resulting in:* [ { "Policy" : {* "propertyName" : "policy",* "statementLink" : "http://creativecommons.org/licenses/by/2.5/class="sh_comment">",* "statementLabel" : "Attribution 2.5 Generic (CC BY 2.5)",* "typeLabel" : "license",* "statusCode" : 200* }* } ]*/###############################################################Section: Distribution Properties########################################################################################################################## -->4.5.6 Distribution Properties4.5.6.1 PublisherWhen the MediaResource.getMediaProperty operationis invoked with "publisher" as a value of the propertyNamesparameter, an object implementing the Publisherinterface is returned representing the publisher property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Publisher :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">publisherLink;attribute DOMStringclass="idlAttrName">publisherLabel;};4.5.6.1.1 AttributespublisherLabelof type DOMStringThis attribute represents the publisher as a plain string.No exceptions.publisherLinkof type DOMStringThis attribute represents the publisher as a URI.No exceptions.4.5.6.1.2 Example in Javascriptpublisher = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["publisher"]);/** Resulting in:* [ { "Publisher" : {* "propertyName" : "publisher",* "publisherLabel" : "ACME",* "publisherLink" : "http://company.example.com/ACMEclass="sh_comment">",* "statusCode" : 200* }* } ]*/4.5.6.2 TargetAudienceWhen the MediaResource.getMediaProperty operationis invoked with "targetAudience" as a value of the propertyNamesparameter, an object implementing the TargetAudienceinterface is returned representing the targetAudienceproperty (defined in the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">TargetAudience :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">audienceLink;attribute DOMStringclass="idlAttrName">audienceLabel;attribute DOMStringclass="idlAttrName">classificationSystemLink;attribute DOMStringclass="idlAttrName">classificationSystemLabel;};4.5.6.2.1 AttributesaudienceLabelof type DOMStringThis attribute identifies the target audience by a plainstring.No exceptions.audienceLinkof type DOMStringThis attribute identifies the target audience by a URI.No exceptions.classificationSystemLabelof type DOMStringThis attribute specifies the classification system by aplain string.No exceptions.classificationSystemLinkof type DOMStringThis attribute specifies the classification system by a URI.No exceptions.4.5.6.2.2 Example in JavascripttargetAudienceclass="sh_symbol">= image.getMediaPropertyclass="sh_symbol">(["targetAudience"class="sh_symbol">]);/** Resulting in:* [ { "TargetAudience" : {* "propertyName" : "targetAudience",* "audienceLink" : "http://www.mpaa.org/ratings/what-each-rating-means#NC-17class="sh_comment">",* "audienceLabel" : "No One 17 and Under Admitted",* "classificationSystemLink" : "http://www.mpaa.org/ratingsclass="sh_comment">",* "classificationSystemLabel" : "MPAA",* "statusCode" : 200* }* } ]*/###############################################################Section: Fragments Properties########################################################################################################################## -->4.5.7 Fragments Properties4.5.7.1 FragmentWhen the MediaResource.getMediaProperty operationis invoked with "fragment" as a value of the propertyNamesparameter, an object implementing the Fragmentinterface is returned representing the fragment property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Fragment :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">identifier;attribute DOMStringclass="idlAttrName">roleLink;attribute DOMStringclass="idlAttrName">roleLabel;};4.5.7.1.1 Attributesidentifier oftype DOMStringThis attribute identifies the fragment as Media Fragment URI(temporal, spatial or track).No exceptions.roleLabel of typeDOMStringThis attribute identifies the role of the fragment as aplain string, which can be filtered on in the getMediaPropertyoperation.No exceptions.roleLink of typeclass="idlAttrType">DOMStringThis attribute identifies the role of the fragment as a URI,which can be filtered on in the getMediaPropertyoperation.No exceptions.4.5.7.1.2 Example in Javascriptfragment = movieclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["fragment"]);/** Resulting in:* [ { "Fragment" : {* "propertyName" : "fragment",* "identifier" : "http://www.example.com/video.ogv#t=10,20class="sh_comment">",* "roleLabel" : "chapter",* "statusCode" : 200* }* } ]*/4.5.7.2 NamedFragmentWhen the MediaResource.getMediaProperty operationis invoked with "namedFragment" as a value of the propertyNamesparameter, an object implementing the NamedFragmentinterface is returned representing the namedFragmentproperty (defined in the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">NamedFragment :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">identifier;attribute DOMStringclass="idlAttrName">label;};4.5.7.2.1 Attributesidentifierof type DOMStringThis attribute identifies a named fragment by a MediaFragment URI.No exceptions.label of typeclass="idlAttrType">DOMStringThis attribute contains a plain text label of a named mediafragment, which can be used to contruct a Media Fragment URIfro a named fragment.No exceptions.4.5.7.2.2 Example in JavascriptnamedFragmentclass="sh_symbol">= movie.getMediaPropertyclass="sh_symbol">(["namedFragment"]);/** Resulting in:* [ { "NamedFragment" : {* "propertyName" : "namedFragment",* "identifier" : "http://www.example.com/video.ogv#t=30,35class="sh_comment">",* "label" : "kissScene",* "statusCode" : 200* }* } ]*/###############################################################Section: Technical Properties########################################################################################################################## -->4.5.8 Technical Properties4.5.8.1 FrameSizeWhen the MediaResource.getMediaProperty operationis invoked with "frameSize" as a value of the propertyNamesparameter, an object implementing the FrameSizeinterface is returned representing the frameSize property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">FrameSize :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute doubleclass="idlAttrName">width;attribute doubleclass="idlAttrName">height;attribute DOMStringclass="idlAttrName">unit;};4.5.8.1.1 Attributesheight of typeclass="idlAttrType">doubleThis attribute represents the height of the frame.No exceptions.unit of type DOMStringThis attribute represents the unit of the framewidth/height. The default value is pixels.No exceptions.width of typeclass="idlAttrType">doubleThis attribute represents the width of the frame.No exceptions.4.5.8.1.2 Example in JavascriptframeSize = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["frameSize"]);/** Resulting in:* [ { "FrameSize" : {* "propertyName" : "framesize",* "width" : 3072,* "height" : 2304,* "unit" : "pixels",* "statusCode" : 200* }* } ]*/4.5.8.2 CompressionWhen the MediaResource.getMediaProperty operationis invoked with "compression" as a value of the propertyNamesparameter, an object implementing the Compressioninterface is returned representing the compressionproperty (defined in the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">FrameSize :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">compressionLink;attribute DOMStringclass="idlAttrName">compressionLabel;};4.5.8.2.1 AttributescompressionLabelof type DOMStringThis attribute specifies the compression type of the mediaresource as a plain string.No exceptions.compressionLinkof type DOMStringThis attribute specifies the compression type of the mediaresource by a URI.No exceptions.4.5.8.2.2 Example in Javascriptcompressionclass="sh_symbol">= video.getMediaPropertyclass="sh_symbol">(["compression"]);/** Resulting in:* [ { "Compression" : {* "propertyName" : "compression",* "compressionLabel" : "H.264/AVC",* "compressionLink" : "urn:example-org:codingnames2010#ITU-H264",* "statusCode" : 200* }* } ]*/4.5.8.3 DurationWhen the MediaResource.getMediaProperty operationis invoked with "duration" as a value of the propertyNamesparameter, an object implementing the Durationinterface is returned representing the duration property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Duration :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute doubleclass="idlAttrName">duration;};4.5.8.3.1 Attributesduration of typeclass="idlAttrType">doubleThis attribute represents the duration of the media resource(in seconds) as an double value.No exceptions.4.5.8.3.2 Example in Javascriptduration = videoclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["duration"]);/** Resulting in:* [ { "Duration" : {* "propertyName" : "duration",* "duration" : 3600,* "statusCode" : 200* }* } ]*/4.5.8.4 FormatWhen the MediaResource.getMediaProperty operationis invoked with "format" as a value of the propertyNamesparameter, an object implementing the Formatinterface is returned representing the format property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">Format :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute DOMStringclass="idlAttrName">formatLink;attribute DOMStringclass="idlAttrName">formatLabel;};4.5.8.4.1 AttributesformatLabel oftype DOMStringThis attribute specifies the MIME type of the mediaresource.No exceptions.formatLink of typeDOMStringThis attribute identifies the MIME type of the mediaresource by a URI.No exceptions.4.5.8.4.2 Example in Javascriptformat = imageclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["format"]);/** Resulting in:* [ { "Format" : {* "propertyName" : "format",* "formatLabel" : "image/jpeg",* "formatLink" : "http://dbpedia.org/resource/JPEGclass="sh_comment">",* "statusCode" : 200* }* } ]*/4.5.8.5 SamplingRateWhen the MediaResource.getMediaProperty operationis invoked with "samplingRate" as a value of the propertyNamesparameter, an object implementing the SamplingRateinterface is returned representing the samplingRateproperty (defined in the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">SamplingRate :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute doubleclass="idlAttrName">samplingRate;};4.5.8.5.1 AttributessamplingRateof type doubleThis attribute specifies the audio sampling rate (in Hz) as adouble.No exceptions.4.5.8.5.2 Example in Javascriptsamplingrateclass="sh_symbol">= audio.getMediaPropertyclass="sh_symbol">(["samplingRate"]);/** Resulting in:* [ { "SamplingRate" : {* "propertyName" : "samplingRate",* "samplingRate" : 44100,* "statusCode" : 200* }* } ]*/4.5.8.6 FrameRateWhen the MediaResource.getMediaProperty operationis invoked with "frameRate" as a value of the propertyNamesparameter, an object implementing the FrameRateinterface is returned representing the frameRate property(defined inthe Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">FrameRate :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute doubleclass="idlAttrName">frameRate;};4.5.8.6.1 AttributesframeRate of typedoubleThis attribute specifies the framerate (in fps) as a doublevalue.No exceptions.4.5.8.6.2 Example in Javascriptframerate = videoclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["frameRate"]);/** Resulting in:* [ { "FrameRate" : {* "propertyName" : "frameRate",* "frameRate" : 30,* "statusCode" : 200* }* } ]*/4.5.8.7 AverageBitRateWhen the MediaResource.getMediaProperty operationis invoked with "averageBitRate" as a value of the propertyNamesparameter, an object implementing the AverageBitRateinterface is returned representing the averageBitRateproperty (defined in the Ontology for Media Resources 1.0specification [MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">AverageBitRate :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute doubleclass="idlAttrName">averageBitRate;};4.5.8.7.1 AttributesaverageBitRateof type doubleThis attribute specifies the average bitrate (in kbps) as adouble value.No exceptions.4.5.8.7.2 Example in Javascriptbitrate = videoclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["averageBitRate"class="sh_symbol">]);/** Resulting in:* [ { "AverageBitRate" : {* "propertyName" : "averageBitRate",* "averageBitRate" : 45.06,* "statusCode" : 200* }* } ]*/4.5.8.8 NumTracksWhen the MediaResource.getMediaProperty operationis invoked with "numTracks" as a value of the propertyNamesparameter, an object implementing the NumTracksinterface is returned representing the numTracks property(defined in the Ontology for Media Resources 1.0 specification [href="#bib-MEDIA-ONTOLOGY">MEDIA-ONTOLOGY]).interfaceclass="idlInterfaceID">NumTracks :href="#idl-def-MediaAnnotation">MediaAnnotation {attribute shortclass="idlAttrName">number;attribute DOMStringclass="idlAttrName">typeString;};4.5.8.8.1 Attributesnumber of typeclass="idlAttrType">shortThis attribute specifies the number of tracks as an integervalue.No exceptions.typeString oftype DOMStringThis attribute specifies the type of the tracks that arecounted as a plain string (e.g., audio, subtitle).No exceptions.4.5.8.8.2 Example in JavascriptnumTracks = videoclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["numTracks"]);/** Resulting in:* [ { "NumTracks" : {* "propertyName" : "numTracks",* "number" : 2,* "typeString" : "audio",* "statusCode" : 200* }* } ]*/###############################################################Section: MetadataSource interface########################################################################################################################## -->4.6 MetadataSourceinterfaceMetadataSource interface is used to identify othermetadata sources.interfaceclass="idlInterfaceID">MetadataSource {attribute DOMStringclass="idlAttrName">metadataSource;attribute DOMStringclass="idlAttrName">sourceFormat;};4.6.1 AttributesmetadataSourceof type DOMStringAn URI identifying the metadata source.No exceptions.sourceFormatof type DOMStringThe name of the actual metadata format. It shoulduse the metadataformat identifiers defined in the Ontology for MediaResources 1.0 specification [MEDIA-ONTOLOGY].No exceptions.4.6.2 Examples in JavascriptmetadataSourceclass="sh_symbol">= new MetadataSourceclass="sh_symbol">("http://www.w3.org/2008/WebVideo/Annotations/drafts/metadata_formats/DC_example1.xml"class="sh_symbol">,"dc");###############################################################Section: API STATUS CODES########################################################################################################################## -->4.7 API Status CodesThis section introduces a set of status codes for the defined API toindicate the system behavior. As described in section4.4, the status code is returned as one of the attributes of theMediaAnnotation object returned by a method call to theAPI. These status codes are used on the API level, and applied toeither client side or server side implementations.Numerical CodeTextual DescriptionExample200OKproperty delivered correctly204No Contentproperty retrieved without content206Partial Contentonly a subset of the available data stored in the result set400Bad Requestsyntactical error404Not Foundthe queries resource is not found415Unsupported Media Typeget duration call on an image data store462Property not defined in Source Formatlocation is not defined in MediaRSS500Internal Server Errorinternal library (e.g., extractor) crashes562Property not supporteda subset of properties implemented###############################################################Section: USAGE EXAMPLES OF THE API########################################################################################################################## -->5. Usage examples###############################################################Section: USAGE AS JAVASCRIPT LIBRARY########################################################################################################################## -->5.1 Usage as JavaScript APIThis part illustrates some examples how to use this API usingJavaScript in actual implementations. Moreover, in these examples itis assumed that the implementation of this API knows where to find themetadata that corresponds to a specific media resource (if necessarythe location of the metadata can be configured by the use of the MetadataSourceinterface). The implementation should provide the mappingsof different metadata formats to the coreproperties of the Ontology for Media Resources 1.0 specification[MEDIA-ONTOLOGY]).Example 1: Return the name of the director of the movie"Apocalypse now".//search the video array for the one with title "Apocalypse now"for (var iclass="sh_symbol">= 0; iclass="sh_symbol">< mediaResourceVideoArray.lengthclass="sh_symbol">; i++) {//request for the titles of the video, the variable "titles"//will be filled with an array of MediaAnnotation objects.titles = mediaResourceVideoArray[iclass="sh_symbol">].getMediaPropertyclass="sh_symbol">(["title"],class="sh_string">"", ""class="sh_symbol">, "");//check if the request is finished correctlyif (noErrorStatusclass="sh_symbol">(titles[0class="sh_symbol">].statusCode) ==class="sh_keyword">true) {for (class="sh_keyword">var j = 0class="sh_symbol">; j < titles.lengthclass="sh_symbol">; j++) {//check if the title matchesif (titlesclass="sh_symbol">[j].titleLabel ==class="sh_string">"Apocalypse Now")class="sh_cbracket">{//request for the director of the video, the variable "results"//will be filled with an array of MediaAnnotation objects.tempResults = mediaResourceVideoArrayclass="sh_symbol">[i].getMediaPropertyclass="sh_symbol">(["contributor"],class="sh_string">"", ""class="sh_symbol">, "");for (class="sh_keyword">var k = 0class="sh_symbol">; k < tempResultsclass="sh_symbol">.length; k++)class="sh_cbracket">{if (tempResultsclass="sh_symbol">[i].roleLabel ==class="sh_string">"director") {result = tempResultsclass="sh_symbol">[i];break;}}}}}}/** Resulting in:* [ { "Contributor" : {* "propertyName" : "contributor",* "value" : "Francis Ford Coppola",* ...,* "statusCode" = 200* }* } ]*/Example 2: Retrieve the title of the second song from the album"Joshua Tree" by U2.//get the id of the second song using the fragments propertytracks = albumMediaResource.class="sh_function">getMediaProperty([class="sh_string">"fragment"], ""class="sh_symbol">, "",class="sh_string">"");trackIdentifier = tracks[class="sh_number">1].identifier;//use this identifier to get the mediaResource object that represents the trackmediaResource = newclass="sh_function">MediaResource();if (mediaResourceclass="sh_symbol">.getSupportedModesclass="sh_symbol">() == 2class="sh_symbol">|| mediaResource.getSupportedModesclass="sh_symbol">() == 3class="sh_symbol">) {syncMediaResource = mediaResource.class="sh_function">createMediaResource(trackIdentifierclass="sh_symbol">, new Arrayclass="sh_symbol">(), 2);}//get the title of the tracktitle = syncMediaResource.class="sh_function">getMediaProperty([class="sh_string">"title"], ""class="sh_symbol">, "",class="sh_string">"");/** Resulting in:* [ { "Title" : {* "propertyName" : "title",* "value" : "I Still Haven't Found What I'm Looking For",* ...,* "statusCode" = 200* }* } ]*/Example 3: Return the genre of the movie "Apocalypse Now".genre = movieclass="sh_symbol">.getMediaPropertyclass="sh_symbol">(["genre"],class="sh_string">"", ""class="sh_symbol">, "en-us");/** Resulting in:* [ { "Genre" : {* "propertyName" : "genre",* "value" : "Action",* ...,* "statusCode" = 200* }* },* { "Genre" : {* "propertyName" : "genre",* "value" : "Drama",* ...,* "statusCode" = 200* }* },* { ...* } ]*/###############################################################Section: USAGE AS WEB SERVICE########################################################################################################################## -->5.2 Usage as Web ServiceThis part illustrates how this API could be implemented using webservices. Note that Web IDL currently does not provide bindings forweb services. The given examples correspond to the examples given inhref="#Properties">Section 4.5 for each property.Request:http://example.com/my-media-resource/?getOriginalMetadata=DCResponse (JSON format):[class="sh_cbracket">{ "statusCode" :class="sh_string">"200" },{"originalMetadata"class="sh_symbol">: "<?xml version='1.0'?><metadataxmlns='http://example.org/myapp/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'xsi:schemaLocation='http://example.org/myapp/ http://example.org/myapp/schema.xsd'xmlns:dc='http://purl.org/dc/elements/1.1/'><dc:title>DC title</dc:title></metadata>"class="sh_cbracket">}]The following examples illustrate how to request values for thedifferent properties.Request:http://example.com/my-media-resource/?ma-query=identifierResponse (JSON format):[class="sh_cbracket">{ "Identifier" :class="sh_cbracket">{"propertyName" :class="sh_string">"identifier","identifierLink" :class="sh_string">"urn:uuid:36a87260-1102-11df-8a39-0800200c9a66","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=titleResponse (JSON format):[class="sh_cbracket">{ "Title" :class="sh_cbracket">{"propertyName" :class="sh_string">"title","value" :class="sh_string">"Artificial Horizon","typeLink" :class="sh_string">"http://www.ebu.ch/metadata/cs/ebu_ObjectTypeCodeCS.xml#21"class="sh_symbol">,"typeLabel" :class="sh_string">"Album title","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=languageResponse (JSON format):[class="sh_cbracket">{ "Language" :class="sh_cbracket">{"propertyName" :class="sh_string">"language","languageLabel" :class="sh_string">"en-us","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=locatorResponse (JSON format):[class="sh_cbracket">{ "Locator" :class="sh_cbracket">{"propertyName" :class="sh_string">"locator","locatorLink" :class="sh_string">"http://www.w3.org/2008/WebVideo/Annotations/wiki/images/9/93/MAWG-Stockholm-20090626.JPG"class="sh_symbol">,"statusCode" :class="sh_number">200}} ]Request:http://example.com/my-media-resource/?ma-query=contributorResponse (JSON format):[class="sh_cbracket">{ "Contributor"class="sh_symbol">: {"propertyName" :class="sh_string">"contributor","contributorLink" :class="sh_string">"http://en.wikipedia.org/wiki/Tim_Burton","contributorLabel" :class="sh_string">"Tim Burton","roleLink" :class="sh_string">"http://www.imdb.com/name/nm0000318/","roleLabel" :class="sh_string">"director","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=creatorResponse (JSON format):[class="sh_cbracket">{ "Creator" :class="sh_cbracket">{"propertyName" :class="sh_string">"creator","creatorLink" :class="sh_string">"http://dbpedia.org/resource/William_Shakespeare"class="sh_symbol">,"creatorLabel" :class="sh_string">"William Shakespeare","roleLink" :class="sh_string">"http://www.ebu.ch/metadata/cs/ebu_RoleCodeCS.xml#22.5"class="sh_symbol">,"roleLabel" :class="sh_string">"playwright","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=dateResponse (JSON format):[class="sh_cbracket">{ "MADate" :class="sh_cbracket">{"propertyName" :class="sh_string">"date","date":class="sh_string">"2009-06-26T15:30:00","typeLink" :class="sh_string">"urn:smpte:ul:06.0E.2B.34.01.01.01.02.07.02.01.10.02.03.00.00"class="sh_symbol">,"typeLabel" :class="sh_string">"modification date","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=locationResponse (JSON format):[class="sh_cbracket">{ "Location" :class="sh_cbracket">{"propertyName" :class="sh_string">"location","locationLink" :class="sh_string">"http://en.wikipedia.org/wiki/San_Jose,_California"class="sh_symbol">,"locationLabel" :class="sh_string">"San Jose","longitude" :class="sh_number">37.33986481118008,"latitude" :class="sh_symbol">-121.88507080078125class="sh_symbol">,"altitude" :class="sh_number">0,"coordinateSystemLabel" :class="sh_string">"WGS84","coordinateSystemLink" :class="sh_string">"http://www.w3.org/2003/01/geo/wgs84_pos#Point","statusCode" :class="sh_number">200}} ]Request:http://example.com/my-media-resource/?ma-query=descriptionResponse (JSON format):[class="sh_cbracket">{ "Description"class="sh_symbol">: {"propertyName" :class="sh_string">"description","descriptionLabel" :class="sh_string">"Group picture of the W3C MAWG at the F2F meeting in Stockholm."class="sh_symbol">,"statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=keywordResponse (JSON format):[class="sh_cbracket">{ "Keyword" :class="sh_cbracket">{"propertyName" :class="sh_string">"keyword","keywordLabel" :class="sh_string">"meeting with people from outside the organisation"class="sh_symbol">,"keywordLink" :class="sh_string">"http://sw.opencyc.org/2008/06/10/concept/en/MeetingWithOrganizationalOutsiders"class="sh_symbol">,"statusCode" :class="sh_number">200}},{ "Keyword"class="sh_symbol">: {"propertyName" :class="sh_string">"keyword","keywordLabel" :class="sh_string">"standardisation","keywordLink" :class="sh_string">"http://purl.org/vocabularies/princeton/wn30/synset-standardization-noun-1"class="sh_symbol">,"statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=genreResponse (JSON format):[class="sh_cbracket">{ "Genre" :class="sh_cbracket">{"propertyName" :class="sh_string">"genre","genreLabel" :class="sh_string">"Sports","genreLink" :class="sh_string">"http://www.ebu.ch/metadata/cs/ebu_ContentGenreCS.xml#3.1.1.9"class="sh_symbol">,"statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=ratingResponse (JSON format):[class="sh_cbracket">{ "Rating" :class="sh_cbracket">{"propertyName" :class="sh_string">"rating","ratingValue" :class="sh_number">10.0,"ratingSystemLabel" :class="sh_string">"John Doe","ratingSystemLink" :class="sh_string">"http://individuals.example.com/JohnDoe","minimum" :class="sh_number">0,"maximum" :class="sh_number">10.0,"statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=relationResponse (JSON format):[class="sh_cbracket">{ "Relation" :class="sh_cbracket">{"propertyName" :class="sh_string">"relation","targetLink" :class="sh_string">"http://www.w3.org/2008/WebVideo/Annotations/wiki/Image:MAWG-Stockholm-20090626_thumb.JPG"class="sh_symbol">,"targetLabel" :class="sh_string">"Group picture of MAWG in Stockholm","typeLink" :class="sh_string">"http://www.ebu.ch/metadata/cs/ebu_HowRelatedCS.xml#19"class="sh_symbol">,"typeLabel" :class="sh_string">"thumbnail","statusCode" :class="sh_number">200}} ]Request:http://example.com/my-media-resource/?ma-query=collectionResponse (JSON format):[class="sh_cbracket">{ "Collection" :class="sh_cbracket">{"propertyName" :class="sh_string">"collection","collectionLink" :class="sh_string">"http://individuals.example.com/JohnDoe/myWorkPictures/"class="sh_symbol">,"collectionLabel" :class="sh_string">"My Work Pictures","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=copyrightResponse (JSON format):[class="sh_cbracket">{ "Copyright" :class="sh_cbracket">{"propertyName" :class="sh_string">"copyright","copyrightLabel" :class="sh_string">"All images in the collection are copyrighted by John Doe."class="sh_symbol">,"holderLabel" :class="sh_string">"John Doe","holderLink" :class="sh_string">"http://individuals.example.com/JohnDoe","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=policyResponse (JSON format):[class="sh_cbracket">{ "Policy" :class="sh_cbracket">{"propertyName" :class="sh_string">"policy","statementLink" :class="sh_string">"http://creativecommons.org/licenses/by/2.5/","statementLabel" :class="sh_string">"Attribution 2.5 Generic (CC BY 2.5)","typeLabel" :class="sh_string">"license","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=publisherResponse (JSON format):[class="sh_cbracket">{ "Publisher" :class="sh_cbracket">{"propertyName" :class="sh_string">"publisher","publisherLabel" :class="sh_string">"ACME","publisherLink" :class="sh_string">"http://company.example.com/ACME","statusCode" :class="sh_number">200}} ]Request:http://example.com/my-media-resource/?ma-query=targetAudienceResponse (JSON format):[class="sh_cbracket">{ "TargetAudience"class="sh_symbol">: {"propertyName" :class="sh_string">"targetAudience","audienceLink" :class="sh_string">"http://www.mpaa.org/ratings/what-each-rating-means#NC-17"class="sh_symbol">,"audienceLabel" :class="sh_string">"No One 17 and Under Admitted","classificationSystemLink" :class="sh_string">"http://www.mpaa.org/ratings","classificationSystemLabel" :class="sh_string">"MPAA","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=fragmentResponse (JSON format):[class="sh_cbracket">{ "Fragment" :class="sh_cbracket">{"propertyName" :class="sh_string">"fragment","identifier" :class="sh_string">"http://www.example.com/video.ogv#t=10,20","roleLabel" :class="sh_string">"chapter","statusCode" :class="sh_number">200}} ]Request:http://example.com/my-media-resource/?ma-query=namedFragmentResponse (JSON format):[class="sh_cbracket">{ "NamedFragment"class="sh_symbol">: {"propertyName" :class="sh_string">"namedFragment","label" :class="sh_string">"kissScene","identifier" :class="sh_string">"http://www.example.com/video.ogv#t=30,35","statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=frameSizeResponse (JSON format):[class="sh_cbracket">{ "FrameSize" :class="sh_cbracket">{"propertyName" :class="sh_string">"framesize","width" :class="sh_number">3072,"height" :class="sh_number">2304,"unit" :class="sh_string">"pixels","statusCode" :class="sh_number">200}} ]Request:http://example.com/my-media-resource/?ma-query=compressionResponse (JSON format):[class="sh_cbracket">{ "Compression"class="sh_symbol">: {"propertyName" :class="sh_string">"compression","compressionLabel" :class="sh_string">"H.264/AVC","urn:example-org:codingnames2010#ITU-H264"class="sh_symbol">,"statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=durationResponse (JSON format):[class="sh_cbracket">{ "Duration" :class="sh_cbracket">{"propertyName" :class="sh_string">"duration","duration" :class="sh_number">3600,"statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=formatResponse (JSON format):[class="sh_cbracket">{ "Format" :class="sh_cbracket">{"propertyName" :class="sh_string">"format","formatLabel" :class="sh_string">"image/jpeg","formatLink" :class="sh_string">"http://dbpedia.org/resource/JPEG","statusCode" :class="sh_number">200}} ]Request:http://example.com/my-media-resource/?ma-query=samplingRateResponse (JSON format):[class="sh_cbracket">{ "SamplingRate"class="sh_symbol">: {"propertyName" :class="sh_string">"samplingRate","samplingRate" :class="sh_number">44100,"statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=frameRateResponse (JSON format):[class="sh_cbracket">{ "FrameRate" :class="sh_cbracket">{"propertyName" :class="sh_string">"frameRate","frameRate" :class="sh_number">30,"statusCode" :class="sh_number">200}} ]Request:http://example.com/my-media-resource/?ma-query=averageBitRateResponse (JSON format):[class="sh_cbracket">{ "AverageBitRate"class="sh_symbol">: {"propertyName" :class="sh_string">"averageBitRate","averageBitRate" :class="sh_number">45.06,"statusCode" :class="sh_number">200}} ]Request: http://example.com/my-media-resource/?ma-query=numTracksResponse (JSON format):[class="sh_cbracket">{ "NumTracks" :class="sh_cbracket">{"propertyName" :class="sh_string">"numTracks","number" :class="sh_number">2,"typeString" :class="sh_string">"audio","statusCode" :class="sh_number">200}} ]###############################################################Section: SECURITY CONSIDERATIONS########################################################################################################################## -->6. Implementation NotesThis section contains recommendations for implementators for handlingmissing or multiple identifiers of media resources/fragments as wellas for interoperability of implementations.6.1 Multiple identifiers of mediaresources or fragmentsIn some source formats, it could be possible to identify the resourceor one of its fragments in multiple ways, e.g. by one or moreidentifiers, fragment name or temporal/spatial fragment URIs. Forexample, there could be a temporal media fragment, which can beaddressed by the time range, that also has an assigned ID.In the RDF representation of the Ontology for Media Resources, thiscan be represented (as recommended in the guidelines) by using owl:sameAs.To ensure a similar behaviour in the API, an implementationclass="rfc2119">should return all such identifiers in aresponse. If queries to properties of a fragment with multipleidentifiers are made, the implementation shouldaccept each of the alternative identifiers and return the sameresponse for each of them.6.2 Missing fragment identifiersThere are source formats, which may contain metadata about a fragment(e.g. a track) without specifying any kind of identifier for it. Forthe RDF representation this is not a problem, as blank nodes can beused. In an API implementation, a client requesting the list offragments cannot query properties of a fragment in case there is noidentifier.An implementation shouldgenerate an identifier for the fragment in such a case andclass="rfc2119">should ensure that it is valid for asufficiently long time so that the client can use it in subsequentqueries to properties of fragments. The identifier is not guaranteedto remain permanently valid.This can be implemented in different ways, including the following:In a session-aware environment (e.g., in the user agent, in a webservice environment with session handling), the identifier could bebound to the session and remain valid at least for the duration ofthe session.In a stateless environment, the identifier could be the same forall clients and remain valid a defined time after it has been lastused (i.e., part of a query or response).The identifier could be defined to be unique and permanent. Inthat case the implementation has to manage the assignment ofidentifiers to metadata sources.6.3 Interoperability ofImplementationsThe API can be implemented in two different modes. The asynchronousmode is mandatory while the synchrounous one is optional. In thiscontext, interoperability between these modes would be a desiredfeature in order to provide both processing modes based on theimplementation of one mode only.An implementation of the optional synchronous mode of the API (e.g.in a Web Service) is turned into the mandatory asynchronouscommunication by a wrapper. Therefore the required wrapperfunctionality is implemented in JavaScript using the Web Workersspecification [WEBWORKERS]processing non-blocking scripts. A demo of the wrapper code can bedownloaded from [MAWG-REPO].First, the existing operations of the MediaResource interface areadapted in order to support the synchronous as well as asynchronousmode (mawg_api.js). Then, the implementation of theAsyncMediaResource interface wrapping the synchronous communication isadded. Therefore, the two operations of the AsyncMediaResourceinterface (getMediaProperty and getOriginalMetadata)refer to the corresponding synchronous calls by Web Workers (media_property_worker.js,media_property_worker.js). Finally, the result of thesynchronous communication is pushed forward to the synchronousoperation by invoking a callback function.Wrapping an asynchronous implementation by an synchronous call isinfeasible in JavaScript since threads cannot be suspended andinteract with concurrent ones. Nonetheless, another programminglanguage (e.g. Java), can be used to warp asynchronous API calls inweb service calls.7. Security ConsiderationsThis specification defines a API to access metadata informationrelated to media resources on the Web. These APIs will provide meansfor requesting metadata information, which can already be accessedin one or different formats, either as separate document or embeddedin media resources. As such, this API introduces no additionalsecurity issue.One should nevertheless note that some metadata could be used toaccess personal information about someone without declaration ofagreement. For example, temporal and geographic information about amedia resource could indirectly provide information about itscreator.There are related activities and technical documents in W3C workingon this topics, such as Policy Requirements [rel="biblioentry" class="bibref">POLICY-REQS] in DAPWG, ODRL 1.1 [ODRL11],P3P 1.1 [P3P11]and PLING Wiki [PLING-WIKI].###############################################################Section: ASYNC WEBIDL########################################################################################################################## -->A. Web IDL descriptionFollow this link to download the WebIDLdescription as IDL file.interface MediaResource {short getSupportedModes();MediaResource createMediaResource(DOMString mediaResource,optional MetadataSource[] metadataSources, optional short mode);};interface AsyncMediaResource : MediaResource {void getMediaProperty(DOMString[] propertyNames, PropertyCallback successCallback, ErrorCallback errorCallback,optional DOMString fragment, optional DOMString sourceFormat, optional DOMString language );void getOriginalMetadata (DOMString sourceFormat, MetadataCallback successCallback, ErrorCallback errorCallback);};interface PropertyCallback {void handleEvent (MediaAnnotation[] mediaAnnotations);};interface MetadataCallback {void handleEvent (DOMString[] metadata);};interface ErrorCallback {void handleEvent (DOMString errorStatus);};interface SyncMediaResource : MediaResource {MediaAnnotation[] getMediaProperty(DOMString[] propertyNames,optional DOMString fragment, optional DOMString sourceFormat,optional DOMString language);DOMString[] getOriginalMetadata (DOMString sourceFormat);};interface MetadataSource {attribute DOMString metadataSource;attribute DOMString sourceFormat;};interface MediaAnnotation {attribute DOMString propertyName;attribute DOMString value;attribute DOMString language;attribute DOMString sourceFormat;attribute DOMString fragmentIdentifier;attribute DOMString mappingType;attribute short statusCode;};interface Identifier : MediaAnnotation {attribute DOMString identifierLink;};interface Title : MediaAnnotation {attribute DOMString titleLabel;attribute DOMString typeLink;attribute DOMString typeLabel;};interface Language : MediaAnnotation {attribute DOMString languageLink;attribute DOMString languageLabel;};interface Locator : MediaAnnotation {attribute DOMString locatorLink;};interface Contributor : MediaAnnotation {attribute DOMString contributorLink;attribute DOMString contributorLabel;attribute DOMString roleLink;attribute DOMString roleLabel;};interface Creator : MediaAnnotation {attribute DOMString creatorLink;attribute DOMString creatorLabel;attribute DOMString roleLink;attribute DOMString roleLabel;};interface MADate : MediaAnnotation {attribute DOMString date;attribute DOMString typeLink;attribute DOMString typeLabel;};interface Location : MediaAnnotation {attribute DOMString locationLink;attribute DOMString locationLabel;attribute double longitude;attribute double latitude;attribute double altitude;attribute DOMString coordinateSystemLabel;attribute DOMString coordinateSystemLink;};interface Description : MediaAnnotation {attribute DOMString descriptionLabel;};interface Keyword : MediaAnnotation {attribute DOMString keywordLink;attribute DOMString keywordLabel;};interface Genre : MediaAnnotation {attribute DOMString genreLink;attribute DOMString genreLabel;};interface Rating : MediaAnnotation {attribute double ratingValue;attribute DOMString ratingSystemLink;attribute DOMString ratingSystemLabel;attribute double min;attribute double max;};interface Relation : MediaAnnotation {attribute DOMString targetLink;attribute DOMString targetLabel;attribute DOMString typeLink;attribute DOMString typeLabel;};interface Collection : MediaAnnotation {attribute DOMString collectionLink;attribute DOMString collectionLabel;};interface Copyright : MediaAnnotation {attribute DOMString copyrightLabel;attribute DOMString holderLink;attribute DOMString holderLabel;};interface Policy : MediaAnnotation {attribute DOMString statementLink;attribute DOMString statementLabel;attribute DOMString typeLink;attribute DOMString typeLabel;};interface Publisher : MediaAnnotation {attribute DOMString publisherLink;attribute DOMString publisherLabel;};interface TargetAudience : MediaAnnotation {attribute DOMString audienceLink;attribute DOMString audienceLabel;attribute DOMString classificationSystemLink;attribute DOMString classificationSystemLabel;};interface Fragment : MediaAnnotation {attribute DOMString identifier;attribute DOMString roleLink;attribute DOMString roleLabel;};interface NamedFragment : MediaAnnotation {attribute DOMString identifier;attribute DOMString label;};interface FrameSize : MediaAnnotation {attribute double width;attribute double height;attribute DOMString unit;};interface Compression : MediaAnnotation {attribute DOMString compressionLink;attribute DOMString compressionLabel;};interface Duration : MediaAnnotation {attribute double duration;};interface Format : MediaAnnotation {attribute DOMString formatLink;attribute DOMString formatLabel;};interface SamplingRate : MediaAnnotation {attribute double samplingRate;};interface FrameRate : MediaAnnotation {attribute double frameRate;};interface AverageBitRate : MediaAnnotation {attribute double averageBitRate;};interface NumTracks : MediaAnnotation {attribute short number;attribute DOMString typeString;};B. AcknowledgementsThis document is the work of the W3CMedia Annotations Working Group.Members of the Working Group are (at the time of writing, and byalphabetical order): Werner Bailer (JOANNEUM RESEARCH), TobiasBÃ¼rger ((public) Invited expert), Eric Carlson (Apple, Inc.),Pierre-Antoine Champin (UniversitÃ© de Lyon), Ashish Chawla ((public)Invited expert), Jaime Delgado (Universitat PolitÃ¨cnica deCatalunya), Jean-Pierre Evain ((public) Invited expert), MartinHÃ¶ffernig (JOANNEUM RESEARCH), Philip JÃ¤genstedt (Opera Software),Ralf Klamma ((public) Invited expert), WonSuk Lee (SamsungElectronics Co., Ltd.), VÃ©ronique MalaisÃ© (Vrije Universiteit), ErikMannens (IBBT), Hui Miao (Samsung Electronics Co., Ltd.), ThierryMichel (W3C/ERCIM), Frank Nack (University of Amsterdam), SoohongDaniel Park (Samsung Electronics Co., Ltd.), Silvia Pfeiffer (W3CInvited Experts), Chris Poppe (IBBT), Victor RodrÃ­guez (UniversitatPolitÃ¨cnica de Catalunya), Felix Sasaki (Potsdam University ofApplied Sciences), David Singer (Apple, Inc.), Florian Stegmaier((public) Invited expert), John Strassner ((public) Invited expert),Joakim SÃ¶derberg (ERICSSON), Mari Carmen SuÃ¡rez-Figueroa ((public)Invited expert) Thai Wey Then (Apple, Inc.), Ruben Tous (UniversitatPolitÃ¨cnica de Catalunya), RaphaÃ«l Troncy (EURECOM), VassilisTzouvaras (K-Space), Davy Van Deursen (IBBT).The people who have contributed to discussionsonpublic-media-annotation@w3.org are also gratefullyacknowledged.C. ReferencesC.1 Normative references[MEDIA-FRAGMENTS]Raphael Troncy; Erik Mannens; Silvia Pfeiffer and Davy VanDeursen. MediaFragments URI 1.0. W3C Recommendation 25September 2012. URL: http://www.w3.org/TR/2012/REC-media-frags-20120925/[MEDIA-ONTOLOGY]WonSuk Lee; Werner Bailer; Tobias BÃ¼rger, et al. MediaFragments URI 1.0. W3C Recommendation 09 February2012. URL: http://www.w3.org/TR/2012/REC-mediaont-10-20120209/[RFC2119]S. Bradner. Keywords for use in RFCs to Indicate Requirement Levels.March 1997. Internet RFC 2119. URL: http://www.ietf.org/rfc/rfc2119.txt[WEBIDL]Cameron McCormack. WebIDL, 19 April 2012. W3C Candidate Recommendation.(Work in progress.) URL: http://www.w3.org/TR/2012/CR-WebIDL-20120419/C.2 Informative references[BCP47]A. Phillips; M. Davis. Tagsfor Identifying Languages September 2009. IETFBest Current Practice. URL: http://tools.ietf.org/html/bcp47[MAWG-REPO]MAWG code repository. URL: http://sourceforge.net/projects/mawg[MEDIA-ANNOT-REQS]WonSuk Lee; Felix Sasaki; Tobias BÃ¼rger; VÃ©ronique MalaisÃ©.href="http://www.w3.org/TR/2010/WD-media-annot-reqs-20100121/">UseCases and Requirements for Ontology and Metadata API for Media Object1.0.W3C Working Draft 21 January 2010. URL: http://www.w3.org/TR/2010/WD-media-annot-reqs-20100121/[ODRL11]Renato Iannella. OpenDigital Rights Language (ODRL) Version 1.1. W3CNote. 19 September 2002. URL: http://www.w3.org/TR/odrl[P3P11]Matthias Schunter; Rigo Wenning. ThePlatform for Privacy Preferences 1.1 (P3P1.1) Specification.13 November 2006. W3C Note. URL: http://www.w3.org/TR/2006/NOTE-P3P11-20061113[PLING-WIKI]Policy Languages Interest Group (PLING). PLINGWiki. URL: http://www.w3.org/Policy/pling/[POLICY-REQS]Laura Arribas; Paddy Byers; Marcin Hanclik; Frederick Hirsch;David Rogers. Device API Access Control Use Cases and Requirements 17 March 2011. W3CWorking Group Note. URL: http://www.w3.org/TR/2011/NOTE-dap-policy-reqs-20110317/[WEBWORKERS]Ian Hickson. WebWorkers 01 May 2012. W3C CandidateRecommendation. URL: http://www.w3.org/TR/workers/