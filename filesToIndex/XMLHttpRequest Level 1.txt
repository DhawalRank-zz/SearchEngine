XMLHttpRequest Level 1pre.idl { border:solid thin; background:#eee; color:#000; padding:0.5em; white-space:pre-wrap }pre.idl :link, pre.idl :visited { color:inherit; background:transparent }pre code { color:inherit; background:transparent }.example { margin-left:1em; padding-left:1em; border-left:double; color:#222; background:#fcfcfc }.note { margin-left:2em; font-weight:bold; font-style:italic; color:#008000 }p.note::before { content:"Note: " }.XXX { padding:.5em; border:solid #f00 }p.XXX::before { content:"Issue: " }dl.switch { padding-left:2em }dl.switch > dt { text-indent:-1.5em }dl.switch > dt:before { content:'\21AA'; padding:0 0.5em 0 0; display:inline-block; width:1em; text-align:right; line-height:0.5em }dl.domintro { color: green; margin: 2em 0 2em 2em; padding: 0.5em 1em; border: none; background: #DDFFDD; }dl.domintro dt, dl.domintro dt * { color: black; text-decoration: none; }dl.domintro dd { margin: 0.5em 0 1em 2em; padding: 0; }dl.domintro dd p { margin: 0.5em 0; }dl.domintro:before { display: table; margin: -1em -0.5em -0.5em auto; width: auto; content: 'This box is non-normative. Implementation requirements are given below this box.'; color: red; border: solid 2px; background: white; padding: 0 0.25em; }em.ct { text-transform:lowercase; font-variant:small-caps; font-style:normal }dfn { font-weight:bold; font-style:normal }code { color:orangered }code :link, code :visited { color:inherit }hr:not(.top) { display:block; background:none; border:none; padding:0; margin:2em 0; height:auto }table { border-collapse:collapse; border-style:hidden hidden none hidden }table thead { border-bottom:solid }table tbody th:first-child { border-left:solid }table td, table th { border-left:solid; border-right:solid; border-bottom:solid thin; vertical-align:top; padding:0.2em }XMLHttpRequest Level 1W3C Working Draft 30 January 2014This Version:http://www.w3.org/TR/2014/WD-XMLHttpRequest-20140130/Latest Version:http://www.w3.org/TR/XMLHttpRequest/Latest Editor Draft:http://dvcs.w3.org/hg/xhr/raw-file/default/xhr-1/Overview.htmlPrevious Versions:http://www.w3.org/TR/2012/WD-XMLHttpRequest-20121206/http://www.w3.org/TR/2012/WD-XMLHttpRequest-20120117/http://www.w3.org/TR/2011/WD-XMLHttpRequest2-20110816/http://www.w3.org/TR/2010/WD-XMLHttpRequest2-20100907/http://www.w3.org/TR/2009/WD-XMLHttpRequest2-20090820/http://www.w3.org/TR/2008/WD-XMLHttpRequest2-20080930/http://www.w3.org/TR/2008/WD-XMLHttpRequest2-20080225/http://www.w3.org/TR/2007/WD-XMLHttpRequest-20071026/http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070618/http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070227/http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060927/http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060619/http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060405/Editor:Anne van Kesteren,Mozilla (Upstream WHATWG version)Julian Aubourg,Creative Area??? (Jungkee Song),Samsung ElectronicsHallvord R. M. Steen,MozillaCopyright © 2014 W3C® (MIT, ERCIM, Keio, Beihang), All Rights Reserved. W3C liability, trademark and document use rules apply.AbstractThe XMLHttpRequest specification defines an API that provides scriptedclient functionality for transferring data between a client and a server.Status of this DocumentThis section describes the status of this document at the time of itspublication. Other documents may supersede this document. A list of currentW3C publications and the latest revision of this technical report can befound in the W3C technical reports indexat http://www.w3.org/TR/.This document is published as a snapshot of theXMLHttpRequest Living Specification.If you wish to make comments regarding this document in a mannerthat is tracked by the W3C, please submit them via using our public bug database, or please send comments topublic-webapps@w3.org(archived)with [XHR] at the start of the subject line.The W3C Web Applications WorkingGroup is the W3C working group responsible for this specification's progress along the W3C Recommendation track. This specification is the 30 January 2014 Working Draft.Publication as a Working Draft does not imply endorsement by the W3CMembership. This is a draft document and may be updated, replaced orobsoleted by other documents at any time. It is inappropriate to cite thisdocument as other than work in progress.Work on this specification is also done at the WHATWG. The W3C Web Applications working group actively pursues convergence of XMLHttpRequest specification with the WHATWG.This document was produced by a group operating under the5 February 2004W3C Patent Policy. W3C maintains apubliclist of any patent disclosures made in connection with the deliverables ofthe group; that page also includes instructions for disclosing a patent. Anindividual who has actual knowledge of a patent which the individual believescontainsEssentialClaim(s) must disclose the information in accordance withsection6 of the W3C Patent Policy.Table of Contents1 Introduction1.1 Specification history2 Conformance2.1 Dependencies2.2 Extensibility3 Terminology4 Interface XMLHttpRequest4.1 Task sources4.2 Constructor4.3 Garbage collection4.4 Event handlers4.5 States4.6 Request4.6.1 The open() method4.6.2 The setRequestHeader() method4.6.3 The timeout attribute4.6.4 The withCredentials attribute4.6.5 The upload attribute4.6.6 The send() method4.6.7 Infrastructure for the send() method4.6.8 The abort() method4.7 Response4.7.1 The status attribute4.7.2 The statusText attribute4.7.3 The getResponseHeader() method4.7.4 The getAllResponseHeaders() method4.7.5 Response entity body4.7.6 The overrideMimeType() method4.7.7 The responseType attribute4.7.8 The response attribute4.7.9 The responseText attribute4.7.10 The responseXML attribute4.8 Events summary5 Interface FormDataReferencesAcknowledgments1 IntroductionThis section is non-normative.The XMLHttpRequest object is an API forfetching resources.The name of the object is XMLHttpRequest for compatibilitywith the Web, though each component of this name is potentiallymisleading. First, the object supports any text based format, includingXML. Second, it can be used to make requests over both HTTP and HTTPS(some implementations support protocols in addition to HTTP and HTTPS, butthat functionality is not covered by this specification). Finally, itsupports "requests" in a broad sense of the term as it pertains to HTTP;namely all activity involved with HTTP requests or responses for thedefined HTTP methods.Some simple code to do something with data from an XML documentfetched over the network:function processData(data) {// taking care of data}function handler() {if(this.readyState == this.DONE) {if(this.status == 200 &&this.responseXML != null &&this.responseXML.getElementById('test').textContent) {// success!processData(this.responseXML.getElementById('test').textContent);return;}// something went wrongprocessData(null);}}var client = new XMLHttpRequest();client.onreadystatechange = handler;client.open("GET", "unicorn.xml");client.send();If you just want to log a message to the server:function log(message) {var client = new XMLHttpRequest();client.open("POST", "/log");client.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");client.send(message);}Or if you want to check the status of a document on the server:function fetchStatus(address) {var client = new XMLHttpRequest();client.onreadystatechange = function() {// in case of network errors this might not give reliable resultsif(this.readyState == this.DONE)returnStatus(this.status);}client.open("HEAD", address);client.send();}1.1 Specification historyThe XMLHttpRequest object was initially defined as part ofthe WHATWG's HTML effort. (Long after Microsoft shipped an implementation.)It moved to the W3C in 2006. Extensions (e.g. progress events andcross-origin requests) to XMLHttpRequest were developed in aseparate draft (XMLHttpRequest Level 2) until end of 2011, at which pointthe two drafts were merged and XMLHttpRequest became a singleentity again from a standards perspective. Since 2012, the development workrequired for getting the spec finalized has taken place both in the WHATWG andin the W3C Web Applications working group.XMLHttpRequest Level 1, the first stable Recommendation trackspecification for the XMLHttpRequest feature, standardizes allparts of XMLHttpRequest that are compatibly supported acrossmajor implementations. Implementors should be able to rely on thisspecification and therelated test suitein order to create interoperable implementations.Some features included in theWHATWG specification are left outbecause they are not yet widely implemented or used. These features are:Fetchingdata: URLs.The URLSearchParams type in send() method.The additional methods other than append() defined in the interface FormData.Historical discussion can be found in the following mailing listarchives:whatwg@whatwg.orgpublic-webapi@w3.orgpublic-appformats@w3.orgpublic-webapps@w3.org2 ConformanceAll diagrams, examples, and notes in this specification arenon-normative, as are all sections explicitly marked non-normative.Everything else in this specification is normative.The key words "MUST", "MUST NOT", "REQUIRED",NOT",--> "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and"OPTIONAL" in the normative parts of this specification are to beinterpreted as described in RFC2119. For readability, these words donot appear in all uppercase letters in this specification.[RFC2119]2.1 DependenciesThis specification relies on several underlying specifications.Cross-Origin Resource SharingA conforming user agent mustsupport the algorithms of the Cross-Origin Resource Sharingspecification. [CORS]DOM4A conforming user agent mustsupport at least the subset of the functionality defined in DOM4 thatthis specification relies upon, such as various exceptions andEventTarget. [DOM]DOM Parsing and SerializationA conforming user agent must support at least theserializeconcept from DOM Parsing and Serialization.[DOMPS]Encoding StandardA conforming user agent mustsupport at least the subset of the functionality defined in Encoding Standard thatthis specification relies upon, such as the utf-8 encoding.[ENCODING]File APIA conforming user agent mustsupport at least the subset of the functionality defined in File API thatthis specification relies upon, such as the Blob andFile interfaces. [FILEAPI]HTMLA conforming user agent mustsupport at least the subset of the functionality defined in HTML thatthis specification relies upon, such as the basics of theWindow object and serializing a Documentobject. [HTML]HTTPA conforming user agent mustsupport some version of the HTTP protocol. Requirements regarding HTTPare made throughout the specification. [HTTP]Progress EventsA conforming user agent must support theProgress Events specification.[PROGRESSEVENTS]Typed ArrayA conforming user agent must support theArrayBuffer andArrayBufferView objects.[TYPEDARRAY]URLA conforming user agent mustsupport the URL parsing algorithm of the URLspecification. [URL]Web IDLA conforming user agent must alsobe a conforming implementation of the IDL fragments in thisspecification, as described in the Web IDL specification.[WEBIDL]XMLA conforming user agent must be aconforming XML processor that reports violations of namespacewell-formedness. [XML][XMLNS]It uses the typographic conventions from HTML. [HTML]2.2 ExtensibilityUser agents, Working Groups, and other interested parties arestrongly encouraged to discuss new features on a relevant publicforum, preferablypublic-webapps@w3.org. If thisis for some reason not possible prefix the extension in some way. E.g. ifcompany Foo wants to add a proprietary method bar() it couldbe named fooBar() to prevent clashes with a potentialnon-proprietary method bar().3 TerminologyThe term user credentials for the purposes of thisspecification means cookies, HTTP authentication, and client-side SSLcertificates. Specifically it does not refer to proxy authentication orthe Origin header.[COOKIES]4 Interface XMLHttpRequest[NoInterfaceObject]interface XMLHttpRequestEventTarget : EventTarget {// event handlersattribute EventHandler onloadstart;attribute EventHandler onprogress;attribute EventHandler onabort;attribute EventHandler onerror;attribute EventHandler onload;attribute EventHandler ontimeout;attribute EventHandler onloadend;};interface XMLHttpRequestUpload : XMLHttpRequestEventTarget {};enum XMLHttpRequestResponseType {"","arraybuffer","blob","document","json","text"};[Constructor]interface XMLHttpRequest : XMLHttpRequestEventTarget {// event handlerattribute EventHandler onreadystatechange;// statesconst unsigned short UNSENT = 0;const unsigned short OPENED = 1;const unsigned short HEADERS_RECEIVED = 2;const unsigned short LOADING = 3;const unsigned short DONE = 4;readonly attribute unsigned short readyState;// requestvoid open(ByteString method, [EnsureUTF16] DOMString url);void open(ByteString method, [EnsureUTF16] DOMString url, boolean async, optional [EnsureUTF16] DOMString? username = null, optional [EnsureUTF16] DOMString? password = null);void setRequestHeader(ByteString header, ByteString value);attribute unsigned long timeout;attribute boolean withCredentials;readonly attribute XMLHttpRequestUpload upload;void send(optional (ArrayBufferView or Blob or Document or [EnsureUTF16] DOMString or FormData)? data = null);void abort();// responsereadonly attribute unsigned short status;readonly attribute ByteString statusText;ByteString? getResponseHeader(ByteString header);ByteString getAllResponseHeaders();void overrideMimeType(DOMString mime);attribute XMLHttpRequestResponseType responseType;readonly attribute any response;readonly attribute DOMString responseText;readonly attribute Document? responseXML;};Each XMLHttpRequest object has a unique, associatedXMLHttpRequestUpload object.If the JavaScript global environment is aworker environment, implementations must act as ifDocument and Document? in the above IDL were notexposed. I.e. send() is not overloaded with itand responseXML always returns null (asrequired by its definition, too).4.1 Task sourcesEach XMLHttpRequest object has its owntask source. Namely, theXMLHttpRequest task source.4.2 ConstructorThe XMLHttpRequest object has an associatedsettings object.client = new XMLHttpRequest()Returns a new XMLHttpRequest object.TheXMLHttpRequest()constructor must run these steps:Let xhr be a new XMLHttpRequestobject.Set xhr'ssettings object to therelevant settings objectfor the global object of xhr's interface object.Return xhr.4.3 Garbage collectionAn XMLHttpRequest object must not be garbage collected ifits state is OPENED and thesend() flag is set, its state isHEADERS_RECEIVED, orits state is LOADING, andone of the following is true:It has one or moreevent listenersregistered whose type isreadystatechange,progress,abort,error,load,timeout, orloadend.The upload complete flag is unset and the associatedXMLHttpRequestUpload object has one or moreevent listenersregistered whose type isprogress,abort,error,load,timeout, orloadend.If an XMLHttpRequest object is garbage collected while itsconnection is still open, the user agent must terminate the request.4.4 Event handlersThe following are theevent handlers (and their correspondingevent handler event types)that must be supported on objects implementing an interface that inheritsfrom XMLHttpRequestEventTarget as attributes:event handlerevent handler event typeonloadstartloadstartonprogressprogressonabortabortonerrorerroronloadloadontimeouttimeoutonloadendloadendThe following is theevent handler(and its correspondingevent handler event type) that must besupported as attribute solely by theXMLHttpRequest object:event handlerevent handler event typeonreadystatechangereadystatechange4.5 Statesclient . readyStateReturns the current state.The XMLHttpRequest object can be in several states. ThereadyStateattribute must return the current state, which must be one of thefollowing values:UNSENT(numeric value 0)The object has been constructed.OPENED(numeric value 1)The open() method has been successfully invoked.During this state request headers can be set usingsetRequestHeader()and the request can be made using thesend() method.HEADERS_RECEIVED(numeric value 2)All redirects (if any) have been followed and all HTTP headers ofthe final response have been received. Several response members of theobject are now available.LOADING(numeric value 3)The response entity body is being received.DONE(numeric value 4)The data transfer has been completed or something went wrongduring the transfer (e.g. infinite redirects).The send() flag indicatesthat the send() method hasbeen invoked. It is initially unset and is used during theOPENED state.The error flag indicates some type ofnetwork error or fetch termination. It is initially unset.4.6 RequestEach XMLHttpRequest object has the followingrequest-associated concepts:request method,request URL,author request headers,request entity body,source origin,referrer source,synchronous flag,upload complete flag, andupload events flag.The author request headers is a list of HTTP header namesand corresponding header values. Comparisons against the HTTP header namesmust be done in a case-insensitive manner. Initially it must be empty.The request entity body must initially be null.The synchronous flag,upload complete flag, andupload events flag must be initially unset.To terminate the request run these steps:Set the error flag.Cancel any instance of the fetch algorithmopened by this object.If there are any tasks fromthe object's XMLHttpRequest task source in one of thetask queues, then remove them.4.6.1 The open() methodclient . open(method, url [, async = true [, username = null [, password = null]]])Sets the request method, request URL, andsynchronous flag.Throws a JavaScript TypeError ifeither method is not a valid HTTP method orurl cannot be parsed.Throws a "SecurityError" exceptionif method is a case-insensitive match forCONNECT, TRACE or TRACK.Throws an "InvalidAccessError"exception if async is false, theJavaScript global environment is adocument environment, and either thetimeout attribute is notzero, thewithCredentialsattribute is true, or theresponseTypeattribute is not the empty string.Theopen(method, url, async, username, password)method must run these steps:If settings object'sresponsible document is notfully active,throw an"InvalidStateError" exception.Set base tosettings object'sAPI base URL.Set source origin tosettings object'sorigin.Set referrer source to thesettings object'sAPI referrer source'sURL ifsettings object'sAPI referrer source is adocument, andsettings object'sAPI referrer source otherwise.If method does not match the Methodtoken production, throw a JavaScript TypeError.If method is a case-insensitive match for CONNECT,DELETE, GET, HEAD, OPTIONS,POST, PUT, TRACE, or TRACK, subtract0x20 from each byte in the range 0x61 (ASCII a) to 0x7A (ASCII z).If it does not match any of the above, it is passedthrough literally, including in the final request.M-POST, MKCOL, MOVE, PROPFIND, PROPPATCH, and UNLOCK. -->If method is a case-sensitive match for CONNECT,TRACE, or TRACK,throw a"SecurityError" exception.Allowing these methods would pose a security risk.[HTTPVERBSEC]Let parsed URL be the result ofparsing urlwith base.If parsed URL is failure,throw a JavaScript TypeError.If the async argument is omitted, set async to true, and setusername and password to null.Due to unfortunate legacy constraints, passingundefined for the async argument is treated differentlyfrom async being omitted.If parsed URL's relative flag isset, run these substeps:If the username argument is not null, setparsed URL'susername tousername.If the password argument is not null, setparsed URL'spassword topassword.If async is false, theJavaScript global environment is adocument environment, and either thetimeout attribute value is not zero, thewithCredentials attribute value istrue, or the responseType attributevalue is not the empty string,throw an"InvalidAccessError" exception.Terminate the request.After all, a request can be ongoing at this point.Set variables associated with the object as follows:Set request method to method.Set request URL to parsed URL.If async is false, set the synchronous flag.Set author request headers to the empty list.Unset the send() flag.Set response entity body to null.Set arraybuffer response entity body to null.Set blob response entity body to null.Set document response entity body to null.Set JSON response entity body to null.Set text response entity body to null.If the state is not OPENED, run thesesubsteps:Change the state to OPENED.Fire an event named readystatechange.4.6.2 The setRequestHeader() methodclient . setRequestHeader(header, value)Appends an header to the list ofauthor request headers, or if header is alreadyin the list of author request headers, combines its valuewith value.Throws an "InvalidStateError"exception if the state is notOPENED or if thesend() flag is set.Throws a JavaScript TypeError ifheader is not a valid HTTP header field name or ifvalue is not a valid HTTP header field value.As indicated in the algorithm below certain headers cannotbe set and are left up to the user agent. In addition there are certainother headers the user agent will take control of if they are not set bythe author as indicated at the end of thesend() method section.For non same origin requests using the HTTPGET method a preflight request is made when headers otherthan Accept and Accept-Language are set.ThesetRequestHeader(header, value)method must run these steps:If the state is notOPENED,throw an"InvalidStateError" exception.If the send() flag is set,throw an"InvalidStateError" exception.If header does not match thefield-name production,throw a JavaScript TypeError.If value does not match thefield-value production,throw a JavaScript TypeError.An empty string represents an empty header field value.Terminate these steps if header is a case-insensitivematch for one of the following headers:Accept-CharsetAccept-EncodingAccess-Control-Request-HeadersAccess-Control-Request-MethodConnectionContent-LengthCookieCookie2DateDNTExpectHostKeep-AliveOriginRefererTETrailerTransfer-EncodingUpgradeUser-AgentVia or if the start of header is a case-insensitivematch for Proxy- or Sec- (including whenheader is just Proxy- or Sec-).The above headers are controlled by the user agent tolet it control those aspects of transport. This guarantees dataintegrity to some extent. Header names starting with Sec-are not allowed to be set to allow new headers to be minted that areguaranteed not to come from XMLHttpRequest.If header is not in theauthor request headers list, append header withits associated value to the list and terminate thesesteps.If header is in the author request headers list, append",", followed by U+0020, followed by value, to thevalue of the header matching header.The XMLHttpRequest standard intentionally constraints theuse of HTTP here in line with contemporary implementations.Some simple code demonstrating what happens when setting the sameheader twice:// The following script:var client = new XMLHttpRequest();client.open('GET', 'demo.cgi');client.setRequestHeader('X-Test', 'one');client.setRequestHeader('X-Test', 'two');client.send();// results in the following header being sent:X-Test: one, two4.6.3 The timeout attributeclient . timeoutCan be set to a time in milliseconds. When set to a non-zero valuewill cause fetching toterminate after the given time has passed. When the time has passed, the request hasnot yet completed, and the synchronous flag is unset, atimeout event will then bedispatched,or a "TimeoutError" exception will bethrown otherwise(for the send() method).When set: throws an"InvalidAccessError" exception ifthe synchronous flag is set and theJavaScript global environment is adocument environment.Thetimeoutattribute must return its value. Initially its value must be zero.Setting the timeoutattribute must run these steps:If theJavaScript global environment is adocument environment and thesynchronous flag is set,throw an"InvalidAccessError" exception.Set its value to the new value.This implies that thetimeout attribute can beset while fetching is inprogress. If that occurs it will still be measured relative to the startof fetching.4.6.4 The withCredentials attributeclient . withCredentialsTrue when user credentials are to be included in across-origin request. False when they are to be excluded in across-origin request and when cookies are to be ignored in its response.Initially false.When set: throws an"InvalidStateError" exception if thestate is not UNSENT orOPENED, or ifthe send() flag is set.When set: throws an"InvalidAccessError" exception ifthe synchronous flag is set and theJavaScript global environment is adocument environment.ThewithCredentialsattribute must return its value. Initially its value must be false.Setting thewithCredentialsattribute must run these steps:If the state is notUNSENT orOPENED,throw an"InvalidStateError" exception.If the send() flag is set,throw an"InvalidStateError" exception.If theJavaScript global environment is adocument environment and thesynchronous flag is set,throw an"InvalidAccessError" exception.Set thewithCredentialsattribute's value to the given value.ThewithCredentialsattribute has no effect whenfetchingsame-originresources.4.6.5 The upload attributeclient . uploadReturns the associated XMLHttpRequestUploadobject. It can be used to gather transmission information when data istransferred to a server.Theuploadattribute must return the associatedXMLHttpRequestUpload object.As indicated earlier, each XMLHttpRequestobject has an associated XMLHttpRequestUpload object.4.6.6 The send() methodclient . send([data = null])Initiates the request. The optional argument provides therequest entity body. The argument is ignored ifrequest method is GET orHEAD.Throws an "InvalidStateError"exception if the state is notOPENED or if thesend() flag is set.The send(data)method must run these steps:If the state is notOPENED,throw an"InvalidStateError" exception.If the send() flag is set,throw an"InvalidStateError" exception.If the request method is GET orHEAD, set data to null.If data is null, do not include arequest entity body and go to the next step.Otherwise, let encoding be null, mime type benull, and then follow these rules, depending on data:ArrayBufferViewLet the request entity body be the raw datarepresented by data.BlobIf the object'stypeattribute is not the empty string let mime type be itsvalue.Let the request entity body be the raw datarepresented by data.documentLet encoding be "UTF-8".If data is an HTML document, letmime type be "text/html", or let mime type be"application/xml" otherwise. Then append ";charset=UTF-8" tomime type.Let the request entity body be data,serialized,converted to Unicode,and utf-8 encoded.Re-throw any exceptionserializing throws.If data cannot beserialized, an"InvalidStateError" exception is thrown.a stringLet encoding be "UTF-8".Let mime type be "text/plain;charset=UTF-8".Let the request entity body be data,utf-8 encoded.FormDataLet the request entity body be the result of runningthemultipart/form-data encoding algorithmwith data as form data set and withutf-8 as theexplicit character encoding.encoding of the document is used -->Let mime type be the concatenation of"multipart/form-data;",a U+0020 SPACE character,"boundary=", and themultipart/form-data boundary stringgenerated by themultipart/form-data encoding algorithm.If a Content-Type header is inauthor request headers and its value is avalid MIME type that has acharset parameter whose value is not a case-insensitivematch for encoding, and encodingis not null, set all the charset parameters of thatContent-Type header to encoding.If no Content-Type header is inauthor request headers and mime type isnot null, append a Content-Type header with valuemime type to author request headers.to be included as the first parameter for compatibility reasons -->If the synchronous flag is set, release thestorage mutex.Unset the error flag,upload complete flag and upload events flag.If there is no request entity body or if it is empty,set the upload complete flag.If the synchronous flag is unset and one or moreevent listeners are registered on the XMLHttpRequestUploadobject, set the upload events flag.If the synchronous flag is unset, run these substeps:Set the send() flag.Fire a progress event named loadstart.If the upload complete flag is unset,fire a progress event named loadstarton the XMLHttpRequestUpload object.Return the send()method call, but continue running the steps in this algorithm.If the source origin and the request URLare same originThese are the same-origin request steps.Fetch therequest URL from originsource origin, usingreferrer source asoverride referrer source, with thesynchronous flag set if thesynchronous flag is set, using HTTP methodrequest method, taking into account therequest entity body, list ofauthor request headers, and the rules listed at the end ofthis section.If the synchronous flag is setWhile making the request also follow thesame-origin request event rules.This cannot involve any task queue whatsoever because that wouldmean other tasks on the task queue might get processed as wellwhich is counter to the whole idea of doing things synchronous.-->Thesend() method call willnow be returned by virtue of this algorithm ending.If the synchronous flag is unsetMake upload progress notifications.Make progress notifications.While processing the request, as data becomes available and whenthe user interferes with the request,queue tasksto update the response entity body and follow thesame-origin request event rules.OtherwiseThese are the cross-origin request steps.Make a cross-origin request,passing these as parameters:request URLThe request URL.request methodThe request method.author request headersThe list of author request headers.request entity bodyThe request entity body.source originThe source origin.referrer sourceThereferrer source.omit credentials flagSet ifwithCredentialsattribute's value is false.force preflight flagSet if the upload events flag is set.If the synchronous flag is setWhile making the request also follow thecross-origin request event rules.This cannot involve any task queue whatsoever because that wouldmean other tasks on the task queue might get processed as wellwhich is counter to the whole idea of doing things synchronous.-->Thesend() method call willnow be returned by virtue of this algorithm ending.If the synchronous flag is unsetWhile processing the request, as data becomes available and whenthe end user interferes with the request,queue tasks to update theresponse entity body and follow thecross-origin request event rules.If the user agent allows the end user to configure a proxy itshould modify the request appropriately; i.e., connectto the proxy host instead of the origin server, modify theRequest-Line and send Proxy-Authorizationheaders as specified.If the user agent supports HTTP Authentication andAuthorization is not in the listof author request headers, it shouldconsider requests originating from the XMLHttpRequest objectto be part of the protection space that includes the accessed URIs andsend Authorization headers andhandle 401 Unauthorized requests appropriately.If authentication fails,source origin and therequest URL are same origin,Authorization is not in the listof author request headers,request URL'susername isthe empty string and request URL'spassword isnull, user agents should prompt the end user for their username andpassword.Otherwise, if authentication fails, user agentsmust not prompt the end user for their username andpassword. [HTTPAUTH]Unfortunately end users are prompted because of legacycontent constraints. However, when possible this behavior is prohibited,as it is bad UI. E.g. that is why thesame origin restriction is made above.If the user agent supports HTTP State Management itshould persist, discard and send cookies (as receivedin the Set-Cookie response header, and sent in theCookie header) as applicable.[COOKIES]If the user agent implements a HTTP cache it shouldrespect Cache-Control headers inauthor request headers(e.g. Cache-Control: no-cache bypasses the cache). Itmust not send Cache-Control orPragma request headers automatically unless the end userexplicitly requests such behavior (e.g. by reloading the page).For 304 Not Modified responses that are a result of auser agent generated conditional request the user agentmust act as if the server gave a 200 OKresponse with the appropriate content. The user agentmust allow author request headers to override automatic cachevalidation (e.g. If-None-Match orIf-Modified-Since), in which case304 Not Modified responses must be passed through.[HTTP]If the user agent implements server-driven content-negotiationit must follow these constraints for theAccept and Accept-Language request headers:Both headers must not be modified if they are inauthor request headers.If not in author request headers,Accept-Language with an appropriate value should be appendedto it.If not in author request headers, Acceptwith value */* must be appended to it.Responses must have the content-encodingsautomatically decoded. [HTTP]Besides the author request headers, user agentsshould not include additional request headers other than those mentionedabove or other than those authors are not allowed to set usingsetRequestHeader().This ensures that authors have a predictable API.4.6.7 Infrastructure for the send() methodThe same-origin request event rules are as follows:If the error flag is setTerminate these steps.If the response has an HTTP status code of 301, 302, 303, 307, or 308If the redirect violates infinite loop precautions this is anetwork error.Otherwise, run these steps:Set the request URL to theURL conveyed by theLocation header.If the source origin and theorigin of request URLare same origin transparently followthe redirect while observing thesame-origin request event rules.Otherwise, follow the cross-origin request stepsand terminate the steps for this algorithm.HTTP places requirements on the user agent regarding thepreservation of the request method andrequest entity body during redirects, and also requires endusers to be notified of certain kinds of automatic redirections.If the end user cancels the requestThis is an abort error.If there is a network errorIn case of DNS errors, TLS negotiation failure, or other type ofnetwork errors, this is a network error. Do not request anykind of end user interaction.This does not include HTTP responses that indicatesome type of error, such as HTTP status code 410.If timeout is not 0and since the request started the amount of milliseconds specified bytimeout has passedThis is a timeout error.Once all HTTP headers have been received, thesynchronous flag is unset, and the HTTP status code of theresponse is not one of 301, 302, 303, 307, and 308Switch to the HEADERS_RECEIVED state.Once the first byte (or more) of theresponse entity body has been received and thesynchronous flag is unsetIf there is no response entity body and thesynchronous flag is unsetSwitch to the LOADING state.Once the whole response entity body has beenreceivedIf there is no response entity body and the state isLOADINGIf there is no response entity body and thesynchronous flag is setSwitch to the DONE state.The cross-origin request event rules are as follows:If the error flag is setTerminate these steps.If the cross-origin request statusis preflight complete and the synchronous flag isunsetMake upload progress notifications.If the cross-origin request statusis network errorThis is a network error.If the cross-origin request statusis abort errorThis is an abort error.If timeout is not 0and since the request started the amount of milliseconds specified bytimeout has passedThis is a timeout error.Once all HTTP headers have been received, thecross-origin request status issuccess, and the synchronous flag is unsetSwitch to the HEADERS_RECEIVED state.Make progress notifications.Once the first byte (or more) of theresponse entity body has been received, thecross-origin request status issuccess, and the synchronous flag is unsetIf there is no response entity body, thecross-origin request status issuccess, and the synchronous flag is unsetSwitch to the LOADING state.Once the whole response entity body has been receivedand the cross-origin request status issuccessIf there is no response entity body, thecross-origin request status issuccess, and the state isLOADINGIf there is no response entity body, thecross-origin request status issuccess, and the synchronous flag is setSwitch to the DONE state.When something is said to be a network error run therequest error steps for exception"NetworkError" andevent error.When something is said to be an abort error run therequest error steps for exception"AbortError" and eventabort.When something is said to be a timeout error run therequest error steps for exception"TimeoutError" and eventtimeout.When something is said to be a request error forexception exception and event event run thesesteps:Terminate the request.Change the state to DONE.If the synchronous flag is set,throw anexception exception.Fire an event named readystatechange.At this point it is clear that thesynchronous flag is unset.If the upload complete flag is unset, follow thesesubsteps:Set the upload complete flag.Fire a progress event namedprogress on the XMLHttpRequestUpload object.Fire a progress event namedevent on the XMLHttpRequestUpload object.Fire a progress event namedloadend on the XMLHttpRequestUpload object.Fire a progress event named progress.Fire a progress event named event.Fire a progress event named loadend.When it is said toswitch to the HEADERS_RECEIVED staterun these steps:Change the state to HEADERS_RECEIVED.Fire an event named readystatechange.When it is said toswitch to the LOADING state run thesesteps:Change the state to LOADING.Fire an event named readystatechange.When it is said toswitch to the DONE state run these steps:If the synchronous flag is set, update theresponse entity body.Unset the synchronous flag.Change the state to DONE.Fire an event named readystatechange.Fire a progress event named progress.Fire a progress event named load.Fire a progress event named loadend.When it is said to make progress notifications, while thedownload is progressing, queue a task tofire a progress event named progressabout every 50ms or for every byte received, whichever is leastfrequent.When it is said to make upload progress notifications runthese steps:While the request entity body is being transmitted and theupload complete flag is unset,queue a task tofire a progress event named progress onthe XMLHttpRequestUpload object about every 50ms or forevery byte transmitted, whichever is least frequent.If the request entity body has been fully transmitted(irrespective of whether the server has started transmitting a responseor the status code of such a response) and theupload complete flag is still unset,queue a task to run these substeps:Set the upload complete flag.Fire a progress event named progresson the XMLHttpRequestUpload object.Fire a progress event named loadon the XMLHttpRequestUpload object.Fire a progress event named loadendon the XMLHttpRequestUpload object.4.6.8 The abort() methodclient . abort()Cancels any network activity.The abort() method must runthese steps:Terminate the request.If the state is UNSENT,OPENED with thesend() flag being unset, orDONE go to the next step.Otherwise, run these substeps:Change the state to DONE.Unset the send() flag.Fire an event named readystatechange.If the upload complete flag is false run thesesubsteps:Set the upload complete flag to true.Fire a progress event named progresson the XMLHttpRequestUpload object.Fire a progress event named aborton the XMLHttpRequestUpload object.Fire a progress event named loadendon the XMLHttpRequestUpload object.Fire a progress event named progress.Fire a progress event named abort.Fire a progress event named loadend.Change the state to UNSENT.No readystatechange event is dispatched.4.7 ResponseA response header is a HTTP response headertransmitted before the response entity body.[HTTP]This excludes trailer fields ("trailers").4.7.1 The status attributeclient . statusReturns the HTTP status code.Thestatusattribute must return the result of running thesesteps:If the state isUNSENT orOPENED, return 0.If the error flag is set, return 0.Return the HTTP status code.4.7.2 The statusText attributeclient . statusTextReturns the HTTP status text.ThestatusTextattribute must return the result of running these steps:If the state isUNSENT orOPENED, return the empty string.If the error flag is set, return the empty string.Return the HTTP status text.4.7.3 The getResponseHeader() methodclient . getResponseHeader(header)Returns the header field value from the response of which thefield name matches header, unless the field name isSet-Cookie or Set-Cookie2.ThegetResponseHeader(header)method must run these steps:If the state isUNSENT orOPENED, return null.If the error flag is set, return null.If header is a case-insensitive match forSet-Cookie or Set-Cookie2, return null.If header is a case-insensitive match for multipleresponse headers, return the values of theseheaders as a single concatenated string separated from each other by aU+002C COMMA U+0020 SPACE character pair.If header is a case-insensitive match for a singleresponse header, return the value of that header.Return null.The Cross-Origin Resource Sharing specification filtersresponse headers exposed bygetResponseHeader()for cross-origin requests.[CORS]For the following script:var client = new XMLHttpRequest();client.open("GET", "unicorns-are-teh-awesome.txt", true);client.send();client.onreadystatechange = function() {if(this.readyState == 2) {print(client.getResponseHeader("Content-Type"));}}The print() function will get to process somethinglike:text/plain; charset=UTF-84.7.4 The getAllResponseHeaders() methodclient . getAllResponseHeaders()Returns all headers from the response, with the exception of thosewhose field name is Set-Cookie orSet-Cookie2.ThegetAllResponseHeaders()method must run these steps:If the state isUNSENT orOPENED, return the empty string.If the error flag is set, return the empty string.Return all response headers, excluding headers that are acase-insensitive match for Set-Cookie orSet-Cookie2, as a single string, with each header lineseparated by a U+000D CR U+000A LF pair, excluding the status line, andwith each header name and header value separated by aU+003A COLON U+0020 SPACE pair.The Cross-Origin Resource Sharing specification filtersresponse headers exposed bygetAllResponseHeaders()for cross-origin requests.[CORS]For the following script:var client = new XMLHttpRequest();client.open("GET", "narwhals-too.txt", true);client.send();client.onreadystatechange = function() {if(this.readyState == 2) {print(this.getAllResponseHeaders());}}The print() function will get to process somethinglike:Date: Sun, 24 Oct 2004 04:58:38 GMTServer: Apache/1.3.31 (Unix)Keep-Alive: timeout=15, max=99Connection: Keep-AliveTransfer-Encoding: chunkedContent-Type: text/plain; charset=utf-84.7.5 Response entity bodyThe response MIME type is theMIME type the Content-Type header contains excluding anyparameters andconverted to ASCII lowercase, or null ifthe response header can not be parsed or was omitted. Theoverride MIME type is initially nulland can get a value ifoverrideMimeType()is invoked. Final MIME type is theoverride MIME type unless that is null in which case it isthe response MIME type.The response charset is the value ofthe charset parameter of the Content-Type headeror null if there was no charset parameter or the header couldnot be parsed or was omitted. Theoverride charset is initially null andcan get a value if overrideMimeType() is invoked.Final charset is theoverride charset unlessthat is null in which case it is the response charset.The response entity body is thefragment of the entity body of theresponse received so far(LOADING) or the completeentity body of the response(DONE). If the responsedoes not have an entity body, theresponse entity body is null.The response entity body is updated as partof the send() method and reset by theopen() method.Thearraybuffer response entity bodyis either an ArrayBuffer representingthe response entity body or null. If thearraybuffer response entity body is null, let it be the return value of thefollowing algorithm:If the response entity body is null, return an emptyArrayBuffer object.Return an ArrayBufferobject representing the response entity body.Theblob response entity body is either aBlob representing theresponse entity body or null. If the blob response entity bodyis null, set it to the return value of the following algorithm:If the response entity body is null, return an emptyBlob object.Return a Blob objectrepresenting the response entity body.Thedocument response entity bodyis either a documentrepresenting the response entity body or null. If thedocument response entity body is null, set it to the return value of thefollowing algorithm:If the response entity body is null, return null.If theJavaScript global environment is aworker environment, return null.If final MIME type is not null,text/html, text/xml,application/xml, or does not end in+xml, return null.If responseType isthe empty string and final MIME type istext/html, return null.This is restricted toresponseType being"document" in order to prevent breaking legacycontent.If final MIME type is text/html, run thesesubsteps:Let charset be the final charset.If charset is null,prescanthe first 1024 bytes of the response entity body and ifthat does not terminate unsuccessfully then let charset bethe return value.If charset is null, set charset toutf-8.Let document be adocument thatrepresents the result parsing response entity body following the rules setforth in the HTML Standard for an HTML parser with scripting disabled anda known definite encoding charset.[HTML]Flag document as anHTML document.Otherwise, let document be adocumentthat represents the result of parsing theresponse entity body following the rules set forth in theXML specifications. If that fails (unsupported character encoding,namespace well-formedness error, etc.), return null.[XML] [XMLNS]Scripts in the resulting document tree will not beexecuted, resources referenced will not be loaded and no associated XSLTwill be applied.If charset is null, set charset toutf-8.Set document'sencoding tocharset.Set document'scontent typeto final MIME type.Set document'sURL torequest URL.Set document'sorigin tosource origin.Return document.The JSON response entity body is either a JavaScript valuerepresenting the response entity body. If theJSON response entity body is null, set it to the return value of the followingalgorithm:Let JSON text be the result of runningutf-8 decode on byte streamresponse entity body.Return the result of invoking the initial value of the parseproperty of the JSON object defined in JavaScript, withJSON text as its only argument, or null if that functionthrows an exception. [ECMASCRIPT]The text response entity body is either astring representing the response entity body or null. If thetext response entity body is null, set it to the return value of thefollowing algorithm:If the response entity body is null, return the empty string.Let charset be the final charset.If responseType isthe empty string, charset is null, andfinal MIME type is either null, text/xml,application/xml or ends in +xml, use therules set forth in the XML specifications to determine the encoding. Letcharset be the determined encoding.[XML] [XMLNS]This is restricted toresponseType beingthe empty string to keep the non-legacyresponseType value"text" simple.If charset is null, set charset toutf-8.Return the result of runningdecode on byte streamresponse entity body using fallback encodingcharset.Authors are strongly encouraged to always encode theirresources using utf-8.4.7.6 The overrideMimeType() methodclient . overrideMimeType(mime)Sets the Content-Type header for the response tomime.Throws an "InvalidStateError"exception if the state isLOADING orDONE.Throws a JavaScript TypeError ifmime is not a valid media type.TheoverrideMimeType(mime)method must run these steps:If the state isLOADING orDONE,throw an"InvalidStateError" exception.If parsing mime analogously to the value ofthe Content-Type header fails,throw a JavaScript TypeError.If mime is successfully parsed, setoverride MIME type to its MIME type,excluding any parameters, andconverted to ASCII lowercase.If a charset parameter is successfully parsed, setoverride charset to its value.4.7.7 The responseType attributeclient . responseType [ = value ]Returns the response type.Can be set to change the response type. Values are:the empty string (default),"arraybuffer","blob","document","json", and"text".When set: setting to "document" is ignored if theJavaScript global environment is aworker environmentWhen set: throws an"InvalidStateError" exception if thestate is LOADING orDONE.When set: throws an"InvalidAccessError" exception if thesynchronous flag is set and theJavaScript global environment is adocument environment.TheresponseTypeattribute must return its value. Initially its value must be the emptystring.Setting theresponseTypeattribute must run these steps:If the state isLOADING orDONE,throw an"InvalidStateError" exception.If theJavaScript global environment is adocument environment and thesynchronous flag is set,throw an"InvalidAccessError" exception.If theJavaScript global environment is aworker environment and the givenvalue is "document", terminate these steps.Set theresponseTypeattribute's value to the given value.4.7.8 The response attributeclient . responseReturns the response entity body.Theresponseattribute must return the result of running thesesteps:If responseTypeis the empty string or "text"If the state is notLOADING orDONE, return the empty string.If the error flag is set, return the empty string.Return the text response entity body.OtherwiseIf the state is notDONE, return null.If the error flag is set, return null.IfresponseType is"arraybuffer"Return thearraybuffer response entity body.IfresponseType is"blob"Return theblob response entity body.IfresponseType is"document"Return thedocument response entity body.IfresponseType is"json"Return theJSON response entity body.4.7.9 The responseText attributeclient . responseTextReturns the text response entity body.Throws an "InvalidStateError"exception ifresponseType is notthe empty string or "text".TheresponseTextattribute must return the result of running thesesteps:IfresponseType is notthe empty string or "text",throw an"InvalidStateError" exception.If the state is notLOADING orDONE, return the empty string.If the error flag is set, return the empty string.Return the text response entity body.4.7.10 The responseXML attributeclient . responseXMLReturns the document response entity body.Throws an "InvalidStateError"exception ifresponseType is notthe empty string or "document".TheresponseXMLattribute must return the result of running these steps:IfresponseType is notthe empty string or "document",throw an"InvalidStateError" exception.If the state is notDONE, return null.If the error flag is set, return null.Return the document response entity body.TheresponseXML attributehas XML in its name for historical reasons. It also returns HTML resourcesas documents.4.8 Events summaryThis section is non-normative.The following events are dispatched on XMLHttpRequestand/or XMLHttpRequestUpload objects:Event nameInterfaceDispatched whenreadystatechangeEventThe readyState attribute changesvalue, except when it changes to UNSENT.loadstartProgressEventThe request starts.progressProgressEventTransmitting data.abortProgressEventThe request has been aborted. For instance, by invoking theabort() method.errorProgressEventThe request has failed.loadProgressEventThe request has successfully completed.timeoutProgressEventThe author specified timeout has passed before the requestcompleted.loadendProgressEventThe request has completed (either in success or failure).5 Interface FormData[Constructor(optional HTMLFormElement form)]interface FormData {void append([EnsureUTF16] DOMString name, Blob value, optional [EnsureUTF16] DOMString filename);void append([EnsureUTF16] DOMString name, [EnsureUTF16] DOMString value);};If the JavaScript global environment is aworker environment, FormData must beexposed to JavaScript as if the constructor part of theIDL reads [Constructor] (i.e. has no arguments).The FormData object represents an ordered list ofentries. Eachentry consists of aname and avalue.For the purposes of interaction with other algorithms, anentry's type is "string" ifvalue is a string and "file" otherwise. Ifan entry's type is "file", its filename is thevalue of entry'svalue'sname attribute.fd = new FormData([form])Returns a new FormData object, optionally initialized with theentries from form (if given).fd . append(name, value [, filename])Appends a new entry to theFormData object.TheFormData(form)constructor must run these steps:Let fd be a new FormData object.If form is given, set fd'sentries to the result ofconstructing the form data set for form.Return fd.Theappend(name, value, filename)method must run these steps:Let entry be a newentry.Set entry's nameto name.If value is a Blob, setvalue to a new File object whosename attribute value is"blob".If value is a File andfilename is given, set value'sname attribute value tofilename.Set entry's valueto value.Append entry to FormData object's list ofentries.References[COOKIES]HTTP State Management Mechanism, Adam Barth. IETF.[CORS]Cross-Origin Resource Sharing, Anne van Kesteren. W3C.[DOM]DOM, Anne van Kesteren, Aryeh Gregor, Ms2ger et al.. W3C.[DOMPS]DOM Parsing and Serialization, Travis Leithead and Ms2ger. W3C.[ECMASCRIPT]ECMAScript Language Specification. ECMA.[ENCODING]Encoding Standard, Anne van Kesteren. WHATWG.[FILEAPI]File API, Arun Ranganathan and Jonas Sicking. W3C.[HTML]HTML, Robin Berjon, Travis Leithead, Erika Doyle Navara et al.. W3C.[HTTP]Hypertext Transfer Protocol -- HTTP/1.1, Roy Fielding, James Gettys, Jeffrey Mogul et al.. IETF.[HTTPAUTH]HTTP Authentication: Basic and Digest Access Authentication, J. Franks, Phillip Hallam-Baker, J. Hostetler et al.. IETF.[HTTPVERBSEC]Multiple vendors' web servers enable HTTP TRACE method by default. US-CERT.Microsoft Internet Information Server (IIS) vulnerable to cross-site scripting via HTTP TRACK method. US-CERT.HTTP proxy default configurations allow arbitrary TCP connections. US-CERT.[PROGRESSEVENTS]Progress Events, Anne van Kesteren, Charles McCathieNevile and Jungkee Song. W3C.[RFC2119]Key words for use in RFCs to Indicate Requirement Levels, Scott Bradner. IETF.[TYPEDARRAY]Typed Array, David Herman and Kenneth Russell. Khronos.[URL]URL Standard, Anne van Kesteren. WHATWG.[WEBIDL]Web IDL, Cameron McCormack. W3C.[XML]Extensible Markup Language, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen et al.. W3C.[XMLNS]Namespaces in XML, Tim Bray, Dave Hollander, Andrew Layman et al.. W3C.AcknowledgmentsThe editor would like to thankAddison Phillips,Adrian Bateman,Ahmed Kamel,Alex Hopmann,Alex Vincent,Alexey Proskuryakov,Andrea Marchesini,Asbjørn Ulsberg,Boris Zbarsky,Björn Höhrmann,Cameron McCormack,Chris Marrin,Christophe Jolif,Charles McCathieNevile,Dan Winship,David Andersson,David Flanagan,David Håsäther,David Levin,Dean Jackson,Denis Sureau,Dominik Röttsches,Doug Schepers,Douglas Livingstone,Elliott Sprehn,Elliotte Harold,Eric Lawrence,Eric Uhrhane,Erik ArvidssonErik Dahlström,Feras Moussa,Geoffrey Sneddon,Gideon Cohn,Glenn Adams,Gorm Haug Eriksen,Håkon Wium Lie,Hallvord R. M. Steen,Henri Sivonen,Huub Schaeks,Ian Davis,Ian Hickson,Ivan Herman,Jarred Nicholls,Jeff Walden,Jens Lindström,Jim Deegan,Jim Ley,Joe Farro,Jonas Sicking,Julian Reschke,??? (Jungkee Song),??? (Kang-Hao Lu),Karl Dubost,Lachlan Hunt,Maciej Stachowiak,Magnus Kristiansen,Marc Hadley,Marcos Caceres,Mark Baker,Mark Birbeck,Mark Nottingham,Mark S. Miller,Martin Hassman,Mohamed Zergaoui,Ms2ger,Odin Hørthe Omdal,Olli Pettay,Pawel Glowacki,Peter Michaux,Philip Taylor,Robin Berjon,Rune F. Halvorsen,Ruud Steltenpool,Sergiu Dumitriu,Sigbjørn Finne,Simon Pieters,Stewart Brodie,Sunava Dutta,Takeshi Yoshino,Thomas Roessler,Tom Magliery,Travis LeitheadYehuda Katz, andZhenbin Xufor their contributions to this specification.Special thanks to the Microsoft employees who first implemented theXMLHttpRequest interface, which was first widelydeployed by the Windows Internet Explorer browser.Special thanks also to the WHATWG for drafting an initial version ofthis specification in their Web Applications 1.0 document (now renamed toHTML). [HTML]Special thanks to Anne van Kesteren who has provided nearly all the contents until he stepped down as a W3C editor and is now in succession providing discussions and contents as the editor of the XMLHttpRequest Living Standard in WHATWG which this version of the specification pursues convergence.Thanks also to all those who have helped to improve this specificationby sending suggestions and corrections. (Please, keep bugging us with yourissues!)